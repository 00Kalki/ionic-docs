(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[89878],{88065:function(n,e,t){"use strict";var o=t(67294);e.Z=function(n){return o.createElement("docs-cards",{class:n.className},n.children)}},98870:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return r},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var o=t(22122),a=t(19756),i=(t(67294),t(3905)),l=t(28312),r=(t(88065),{initialTab:"preview"}),s={unversionedId:"layout/structure",id:"layout/structure",isDocsHomePage:!1,title:"Structure",description:"Ionic Framework provides several different layouts that can be used to structure an app. From single page layouts, to split pane views and modals.",source:"@site/docs/layout/structure.md",sourceDirName:"layout",slug:"/layout/structure",permalink:"/docs/layout/structure",editUrl:"https://github.com/ionic-team/ionic-docs/edit/main/docs/layout/structure.md",version:"current",frontMatter:{initialTab:"preview"},sidebar:"docs",previous:{title:"Keyboard",permalink:"/docs/developing/keyboard"},next:{title:"Responsive Grid",permalink:"/docs/layout/grid"}},p=[{value:"Header and Footer Layout",id:"header-and-footer-layout",children:[{value:"Header",id:"header",children:[]},{value:"Footer",id:"footer",children:[]},{value:"Header and Footer",id:"header-and-footer",children:[]},{value:"Live examples",id:"live-examples",children:[]}]},{value:"Tabs Layout",id:"tabs-layout",children:[{value:"Live examples",id:"live-examples-1",children:[]}]},{value:"Menu Layout",id:"menu-layout",children:[{value:"Live examples",id:"live-examples-2",children:[]}]},{value:"Split Pane Layout",id:"split-pane-layout",children:[{value:"Live examples",id:"live-examples-3",children:[]}]}],c={toc:p};function d(n){var e=n.components,t=(0,a.Z)(n,["components"]);return(0,i.kt)("wrapper",(0,o.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Ionic Framework provides several different layouts that can be used to structure an app. From single page layouts, to split pane views and modals."),(0,i.kt)("h2",{id:"header-and-footer-layout"},"Header and Footer Layout"),(0,i.kt)("h3",{id:"header"},"Header"),(0,i.kt)("aside",null,(0,i.kt)(l.Z,{href:"/docs/api/header",header:"Learn More",icon:"/icons/component-header-icon.png",mdxType:"DocsCard"},(0,i.kt)("code",null,"ion-header")," API docs")),(0,i.kt)("p",null,"The most simple layout available consists of a ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/header"},"header")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/content"},"content"),". Most pages in an app generally have both of these, but a header is not required in order to use content."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ion-app>\n  <ion-header>\n    <ion-toolbar>\n      <ion-title>Header</ion-title>\n    </ion-toolbar>\n  </ion-header>\n\n  <ion-content class="ion-padding">\n    <h1>Main Content</h1>\n  </ion-content>\n</ion-app>\n')),(0,i.kt)("h3",{id:"footer"},"Footer"),(0,i.kt)("aside",null,(0,i.kt)(l.Z,{href:"/docs/api/footer",header:"Learn More",icon:"/icons/component-footer-icon.png",mdxType:"DocsCard"},(0,i.kt)("code",null,"ion-footer")," API docs")),(0,i.kt)("p",null,"As you can see, a toolbar in a header appears above the content. Sometimes an app needs to have a toolbar below the content, which is when a footer is used."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ion-app>\n  <ion-content class="ion-padding">\n    <h1>Main Content</h1>\n  </ion-content>\n\n  <ion-footer>\n    <ion-toolbar>\n      <ion-title>Footer</ion-title>\n    </ion-toolbar>\n  </ion-footer>\n</ion-app>\n')),(0,i.kt)("h3",{id:"header-and-footer"},"Header and Footer"),(0,i.kt)("p",null,"These can also be combined on one page to have a toolbar above ",(0,i.kt)("em",{parentName:"p"},"and")," below the content."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ion-app>\n  <ion-header>\n    <ion-toolbar>\n      <ion-title>Header</ion-title>\n    </ion-toolbar>\n  </ion-header>\n\n  <ion-content class="ion-padding">\n    <h1>Main Content</h1>\n  </ion-content>\n\n  <ion-footer>\n    <ion-toolbar>\n      <ion-title>Footer</ion-title>\n    </ion-toolbar>\n  </ion-footer>\n</ion-app>\n')),(0,i.kt)("h3",{id:"live-examples"},"Live examples"),(0,i.kt)("p",null,"You can view a live example of this setup in Angular ",(0,i.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/ionic-ng-header-footer"},"here")," and for React ",(0,i.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/ionic-react-head-foot"},"here"),"."),(0,i.kt)("h2",{id:"tabs-layout"},"Tabs Layout"),(0,i.kt)("p",null,"A layout consisting of horizontal ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/tabs"},"tabs")," can be used to let the user quickly change between content views. Each tab can contain static content or a navigation stack by using an ",(0,i.kt)("inlineCode",{parentName:"p"},"ion-router-outlet")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ion-nav"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ion-app>\n  <ion-tabs>\n    <ion-tab tab="home">\n      <h1>Home Content</h1>\n    </ion-tab>\n    <ion-tab tab="settings">\n      <h1>Settings Content</h1>\n    </ion-tab>\n\n    <ion-tab-bar slot="bottom">\n      <ion-tab-button tab="home">\n        <ion-label>Home</ion-label>\n        <ion-icon name="home"></ion-icon>\n      </ion-tab-button>\n      <ion-tab-button tab="settings">\n        <ion-label>Settings</ion-label>\n        <ion-icon name="settings"></ion-icon>\n      </ion-tab-button>\n    </ion-tab-bar>\n  </ion-tabs>\n</ion-app>\n')),(0,i.kt)("h3",{id:"live-examples-1"},"Live examples"),(0,i.kt)("p",null,"You can view a live example of this setup in Angular ",(0,i.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/ionic-ng-tabs"},"here")," and for React ",(0,i.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/ionic-react-tab-layout"},"here"),"."),(0,i.kt)("h2",{id:"menu-layout"},"Menu Layout"),(0,i.kt)("p",null,"A standard layout among mobile apps includes the ability to toggle a side ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/menu"},"menu")," by clicking a button or swiping it open from the side. Side menus are generally used for navigation, but they can contain any content."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ion-app>\n  <ion-menu content-id="main-content">\n    <ion-header>\n      <ion-toolbar color="primary">\n        <ion-title>Menu</ion-title>\n      </ion-toolbar>\n    </ion-header>\n\n    <ion-content>\n      <ion-list>\n        <ion-list-header>\n          Navigate\n        </ion-list-header>\n        <ion-menu-toggle auto-hide="false">\n          <ion-item button>\n            <ion-icon slot="start" name=\'home\'></ion-icon>\n            <ion-label>\n              Home\n            </ion-label>\n          </ion-item>\n        </ion-menu-toggle>\n      </ion-list>\n    </ion-content>\n  </ion-menu>\n\n  <ion-page class="ion-page" id="main-content">\n    <ion-header>\n      <ion-toolbar>\n        <ion-buttons slot="start">\n          <ion-menu-toggle>\n            <ion-button>\n              <ion-icon slot="icon-only" name="menu"></ion-icon>\n            </ion-button>\n          </ion-menu-toggle>\n        </ion-buttons>\n        <ion-title>Header</ion-title>\n      </ion-toolbar>\n    </ion-header>\n    <ion-content class="ion-padding">\n      <h1>Main Content</h1>\n      <p>Click the icon in the top left to toggle the menu.</p>\n    </ion-content>\n  </ion-page>\n</ion-app>\n\n<ion-menu-controller></ion-menu-controller>\n')),(0,i.kt)("h3",{id:"live-examples-2"},"Live examples"),(0,i.kt)("p",null,"You can view a live example of this setup in Angular ",(0,i.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/ionic-ng-menu-layout"},"here")," and for React ",(0,i.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/ionic-react-menu"},"here"),"."),(0,i.kt)("h2",{id:"split-pane-layout"},"Split Pane Layout"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/split-pane"},"split pane")," layout has a more complex structure because it can combine the previous layouts. It allows for multiple views to be displayed when the viewport is above a specified breakpoint. If the device's screen size is below a certain size, the split pane view will be hidden."),(0,i.kt)("p",null,"By default, the split pane view will show when the screen is larger than ",(0,i.kt)("inlineCode",{parentName:"p"},"768px"),", or the ",(0,i.kt)("inlineCode",{parentName:"p"},"md")," breakpoint, but this can be customized to use different breakpoints by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"when")," property. Below is an example where the split pane contains a menu that is visible for ",(0,i.kt)("inlineCode",{parentName:"p"},"sm")," screens and up, or when the viewport is larger than ",(0,i.kt)("inlineCode",{parentName:"p"},"576px"),". By resizing the browser horizontally so that the app is smaller than this, the split pane view will disappear."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ion-app>\n  <ion-split-pane when="sm" content-id="main-content">\n    <ion-menu content-id="main-content">\n      <ion-header>\n        <ion-toolbar color="primary">\n          <ion-title>Menu</ion-title>\n        </ion-toolbar>\n      </ion-header>\n\n      <ion-content>\n        <ion-list>\n          <ion-list-header>\n            Navigate\n          </ion-list-header>\n          <ion-menu-toggle auto-hide="false">\n            <ion-item button>\n              <ion-icon slot="start" name=\'home\'></ion-icon>\n              <ion-label>\n                Home\n              </ion-label>\n            </ion-item>\n          </ion-menu-toggle>\n        </ion-list>\n      </ion-content>\n    </ion-menu>\n\n    <div class="ion-page" id="main-content">\n      <ion-header>\n        <ion-toolbar>\n          <ion-buttons slot="start">\n            <ion-menu-toggle>\n              <ion-button>\n                <ion-icon slot="icon-only" name="menu"></ion-icon>\n              </ion-button>\n            </ion-menu-toggle>\n          </ion-buttons>\n          <ion-title>Header</ion-title>\n        </ion-toolbar>\n      </ion-header>\n      <ion-content class="ion-padding">\n        <h1>Main Content</h1>\n      </ion-content>\n    </div>\n\n  </ion-split-pane>\n</ion-app>\n')),(0,i.kt)("p",null,"It's important to note that the element with the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," matching the ",(0,i.kt)("inlineCode",{parentName:"p"},"content-id")," specified by the split pane will be the main content that is always visible. This can be any element, including an ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/nav"},"ion-nav"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/router-outlet"},"ion-router-outlet"),", or an ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/tabs"},"ion-tabs"),"."),(0,i.kt)("h3",{id:"live-examples-3"},"Live examples"),(0,i.kt)("p",null,"You can view a live example of this setup in Angular ",(0,i.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/ionic-ng-split-pane"},"here")," and for React ",(0,i.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/ionic-react-split-pane"},"here"),"."))}d.isMDXComponent=!0}}]);