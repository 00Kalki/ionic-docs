(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[52439],{86630:function(e,t,o){"use strict";o.r(t),o.d(t,{frontMatter:function(){return i},metadata:function(){return r},toc:function(){return l},default:function(){return h}});var a=o(22122),n=o(19756),s=(o(67294),o(3905)),i={sidebar_label:"Saving Photos"},r={unversionedId:"react/your-first-app/saving-photos",id:"react/your-first-app/saving-photos",isDocsHomePage:!1,title:"Saving Photos to the Filesystem",description:"We\u2019re now able to take multiple photos and display them in a photo gallery on the second tab of our app. These photos, however, are not currently being stored permanently, so when the app is closed, they will be lost.",source:"@site/docs/react/your-first-app/3-saving-photos.md",sourceDirName:"react/your-first-app",slug:"/react/your-first-app/saving-photos",permalink:"/docs/react/your-first-app/saving-photos",editUrl:"https://github.com/ionic-team/ionic-docs/edit/main/docs/react/your-first-app/3-saving-photos.md",version:"current",sidebar_label:"Saving Photos",sidebarPosition:3,frontMatter:{sidebar_label:"Saving Photos"},sidebar:"docs",previous:{title:"Taking Photos with the Camera",permalink:"/docs/react/your-first-app/taking-photos"},next:{title:"Loading Photos from the Filesystem",permalink:"/docs/react/your-first-app/loading-photos"}},l=[{value:"Filesystem API",id:"filesystem-api",children:[]}],p={toc:l};function h(e){var t=e.components,o=(0,n.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"We\u2019re now able to take multiple photos and display them in a photo gallery on the second tab of our app. These photos, however, are not currently being stored permanently, so when the app is closed, they will be lost."),(0,s.kt)("h2",{id:"filesystem-api"},"Filesystem API"),(0,s.kt)("p",null,"()Fortunately, saving them to the filesystem only takes a few steps. Begin by opening the ",(0,s.kt)("inlineCode",{parentName:"p"},"usePhotoGallery")," hook (",(0,s.kt)("inlineCode",{parentName:"p"},"src/hooks/usePhotoGallery.ts"),"), and get access to the ",(0,s.kt)("inlineCode",{parentName:"p"},"writeFile")," method from the ",(0,s.kt)("inlineCode",{parentName:"p"},"FileSystem")," class:"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"We will use the ",(0,s.kt)("inlineCode",{parentName:"p"},"writeFile")," method initially, but we will use the others coming up shortly, so we'll go ahead and import them now.")),(0,s.kt)("p",null,"Next, create a couple of new functions in ",(0,s.kt)("inlineCode",{parentName:"p"},"usePhotoGallery"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"export function usePhotoGallery() {\n\n\nconst savePicture = async (photo: CameraPhoto, fileName: string): Promise<Photo> => {\n  const base64Data = await base64FromPath(photo.webPath!);\n  const savedFile = await FileSystem.writeFile({\n    path: fileName,\n    data: base64Data,\n    directory: Directory.Data\n  });\n\n  // Use webPath to display the new image instead of base64 since it's\n  // already loaded into memory\n  return {\n    filepath: fileName,\n    webviewPath: photo.webPath\n  };\n};\n}\n\n\nexport async function base64FromPath(path: string): Promise<string> {\n  const response = await fetch(path);\n  const blob = await response.blob();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = reject;\n    reader.onload = () => {\n      if (typeof reader.result === 'string') {\n        resolve(reader.result);\n      } else {\n        reject('method did not return a string')\n      }\n    };\n    reader.readAsDataURL(blob);\n  });\n}\n\n")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The base64FromPath method is a helper util that downloads a file from the supplied path and returns a base64 representation of that file.")),(0,s.kt)("p",null,"We pass in the ",(0,s.kt)("inlineCode",{parentName:"p"},"cameraPhoto")," object, which represents the newly captured device photo, as well as the fileName, which will provide a path for the file to be stored to."),(0,s.kt)("p",null,"Next we use the Capacitor ",(0,s.kt)("a",{parentName:"p",href:"https://capacitor.ionicframework.com/docs/apis/filesystem"},"Filesystem API")," to save the photo to the filesystem. We start by converting the photo to base64 format, then feed the data to the Filesystem\u2019s ",(0,s.kt)("inlineCode",{parentName:"p"},"writeFile")," function."),(0,s.kt)("p",null,"Last, call ",(0,s.kt)("inlineCode",{parentName:"p"},"savePicture")," and pass in the cameraPhoto object and filename directly underneath the call to ",(0,s.kt)("inlineCode",{parentName:"p"},"setPhotos")," in the ",(0,s.kt)("inlineCode",{parentName:"p"},"takePhoto")," method. Here is the full method:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const takePhoto = async () => {\n  const cameraPhoto = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n    source: CameraSource.Camera,\n    quality: 100\n  });\n\n  const fileName = new Date().getTime() + '.jpeg';\n  const savedFileImage = await savePicture(cameraPhoto, fileName);\n  const newPhotos = [savedFileImage, ...photos];\n  setPhotos(newPhotos);\n};\n")),(0,s.kt)("p",null,"There we go! Each time a new photo is taken, it\u2019s now automatically saved to the filesystem."))}h.isMDXComponent=!0}}]);