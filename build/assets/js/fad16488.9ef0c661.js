(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[81231],{42955:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return r},toc:function(){return s},default:function(){return p}});var o=t(22122),l=t(19756),i=(t(67294),t(3905)),a={},r={unversionedId:"vue/virtual-scroll",id:"vue/virtual-scroll",isDocsHomePage:!1,title:"Virtual Scroll",description:"One virtual scrolling solution to consider for your Ionic Vue app is vue-virtual-scroller. This guide will go over how to install vue-virtual-scroller into your Ionic Vue application and use it with other Ionic components.",source:"@site/docs/vue/virtual-scroll.md",sourceDirName:"vue",slug:"/vue/virtual-scroll",permalink:"/docs/vue/virtual-scroll",editUrl:"https://github.com/ionic-team/ionic-docs/edit/main/docs/vue/virtual-scroll.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Vue Navigation",permalink:"/docs/vue/navigation"},next:{title:"Slides",permalink:"/docs/vue/slides"}},s=[{value:"Installation",id:"installation",children:[]},{value:"Registering Virtual Scroll Components",id:"registering-virtual-scroll-components",children:[{value:"Installing all Components",id:"installing-all-components",children:[]}]},{value:"Usage",id:"usage",children:[]},{value:"A Note on Ionic Components",id:"a-note-on-ionic-components",children:[]},{value:"Further Reading",id:"further-reading",children:[]}],c={toc:s};function p(e){var n=e.components,t=(0,l.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"One virtual scrolling solution to consider for your Ionic Vue app is ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Akryum/vue-virtual-scroller/blob/next/packages/vue-virtual-scroller/README.md"},"vue-virtual-scroller"),". This guide will go over how to install ",(0,i.kt)("inlineCode",{parentName:"p"},"vue-virtual-scroller")," into your Ionic Vue application and use it with other Ionic components."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"To setup the virtual scroller, first install ",(0,i.kt)("inlineCode",{parentName:"p"},"vue-virtual-scroll"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm install vue-virtual-scroll@next\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Be sure to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"next")," tag otherwise you will get a version of ",(0,i.kt)("inlineCode",{parentName:"p"},"vue-virtual-scroll")," that is only compatible with Vue 2.\nFrom here, we need to import the virtual scroller's CSS into our app. In ",(0,i.kt)("inlineCode",{parentName:"p"},"main.ts"),", add the following line:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import 'vue-virtual-scroller/dist/vue-virtual-scroller.css';\n")),(0,i.kt)("h2",{id:"registering-virtual-scroll-components"},"Registering Virtual Scroll Components"),(0,i.kt)("p",null,"Now that we have the package installed and the CSS imported, we can either import all virtual scroll components or only import the components we want to use. This guide will show how to do both."),(0,i.kt)("h3",{id:"installing-all-components"},"Installing all Components"),(0,i.kt)("p",null,"To install all virtual scroll components for use your app, add the following import to ",(0,i.kt)("inlineCode",{parentName:"p"},"main.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import VueVirtualScroller from 'vue-virtual-scroller';\n")),(0,i.kt)("p",null,"Next, we need to install this in our Vue application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"app.use(VueVirtualScroller);\n")),(0,i.kt)("p",null,"After doing this, all virtual scroll components will be available for use in our app."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: Installing all components may result in unused virtual scroll components being added to your application bundle. See the ",(0,i.kt)("a",{parentName:"p",href:"#installing-specific-components"},"Installing Specific Components")," section below for an approach that works better with treeshaking."),(0,i.kt)("h3",{parentName:"blockquote",id:"installing-specific-components"},"Installing Specific Components")),(0,i.kt)("p",null,"To install specific virtual scroll components for use in your app, import the component you want to use in ",(0,i.kt)("inlineCode",{parentName:"p"},"main.ts"),". In this example, we will be using the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecycleScroller")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { RecycleScroller } from 'vue-virtual-scroller';\n")),(0,i.kt)("p",null,"Next, we need to add the component to our Vue application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"app.component('RecycleScroller', RecycleScroller);\n")),(0,i.kt)("p",null,"After doing this, we will be able to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecycleScroller")," component in our app."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"This example will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecycleScroller")," component which only renders the visible items in your list. Other components such as ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamicScroller")," can be used when you do not know the size of the items in advance."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"RecycleScroller")," component should be added inside of your ",(0,i.kt)("inlineCode",{parentName:"p"},"ion-content")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  <ion-page>\n    <ion-content>\n      <ion-list>\n        <RecycleScroller\n          class="scroller"\n          :items="list"\n          :item-size="56"\n        >\n          <template #default="{ item }">\n            <ion-item>\n              <ion-avatar slot="start">\n                <img src="https://picsum.photos/seed/picsum/40/40" />\n              </ion-avatar>\n              <ion-label>{{ item }}</ion-label>\n            </ion-item>\n          </template>\n        </RecycleScroller>\n      </ion-list>\n    </ion-content>\n  </ion-page>\n</template>\n\n<script>\n  import { defineComponent, ref } from \'vue\';\n  import {\n    IonAvatar,\n    IonContent,\n    IonItem,\n    IonLabel,\n    IonPage\n  } from \'@ionic/vue\';\n  \n  export default defineComponent({\n    components: {\n      IonAvatar,\n      IonContent,\n      IonItem,\n      IonLabel,\n      IonPage\n    },\n    setup() {\n      const list = ref([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n      \n      return { list }\n    }\n  });\n<\/script>\n')),(0,i.kt)("p",null,"There are two important pieces we need to account for in order for ",(0,i.kt)("inlineCode",{parentName:"p"},"RecycleScroller")," to work. First, we need to provide it with an array of data to iterate over via the ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," property. In this case, we have an array called ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," which provides our data. Second, we need to provide the size of each node via the ",(0,i.kt)("inlineCode",{parentName:"p"},"item-size")," property. If you do not know the size of the node ahead of time, you should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamicScroller")," component instead."),(0,i.kt)("p",null,"Now that our template is setup, we need to add some CSS to size the virtual scrolling viewport correctly. In a ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," tag in your component, add the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css"},".scroller {\n  height: 100%;\n}\n")),(0,i.kt)("h2",{id:"a-note-on-ionic-components"},"A Note on Ionic Components"),(0,i.kt)("p",null,"Certain Ionic Framework functionality is currently not compatible with virtual scrolling. Features such as collapsible large titles, ",(0,i.kt)("inlineCode",{parentName:"p"},"ion-infinite-scroll"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"ion-refresher")," rely on being able to scroll on ",(0,i.kt)("inlineCode",{parentName:"p"},"ion-content")," itself, and as a result will not work when using virtual scrolling."),(0,i.kt)("p",null,"We are working to improve compatibility between these components and virtual scrolling solutions. You can follow progress and give feedback here: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ionic-team/ionic-framework/issues/23437"},"https://github.com/ionic-team/ionic-framework/issues/23437"),"."),(0,i.kt)("h2",{id:"further-reading"},"Further Reading"),(0,i.kt)("p",null,"This guide only covers a small portion of what ",(0,i.kt)("inlineCode",{parentName:"p"},"vue-virtual-scroller")," is capable of. For more details, please see the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Akryum/vue-virtual-scroller/blob/next/packages/vue-virtual-scroller/README.md"},"vue-virtual-scroller documentation"),"."))}p.isMDXComponent=!0}}]);