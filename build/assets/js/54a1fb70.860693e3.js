(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[60911],{41549:function(e,t,o){"use strict";o.r(t),o.d(t,{frontMatter:function(){return i},metadata:function(){return r},toc:function(){return l},default:function(){return h}});var a=o(22122),n=o(19756),s=(o(67294),o(3905)),i={sidebar_label:"Saving Photos"},r={unversionedId:"vue/your-first-app/saving-photos",id:"vue/your-first-app/saving-photos",isDocsHomePage:!1,title:"Saving Photos to the Filesystem",description:"We\u2019re now able to take multiple photos and display them in a photo gallery on the second tab of our app. These photos, however, are not currently being stored permanently, so when the app is closed, they will be lost.",source:"@site/docs/vue/your-first-app/3-saving-photos.md",sourceDirName:"vue/your-first-app",slug:"/vue/your-first-app/saving-photos",permalink:"/docs/vue/your-first-app/saving-photos",editUrl:"https://github.com/ionic-team/ionic-docs/edit/main/docs/vue/your-first-app/3-saving-photos.md",version:"current",sidebar_label:"Saving Photos",sidebarPosition:3,frontMatter:{sidebar_label:"Saving Photos"},sidebar:"docs",previous:{title:"Taking Photos with the Camera",permalink:"/docs/vue/your-first-app/taking-photos"},next:{title:"Loading Photos from the Filesystem",permalink:"/docs/vue/your-first-app/loading-photos"}},l=[{value:"Filesystem API",id:"filesystem-api",children:[]}],p={toc:l};function h(e){var t=e.components,o=(0,n.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"We\u2019re now able to take multiple photos and display them in a photo gallery on the second tab of our app. These photos, however, are not currently being stored permanently, so when the app is closed, they will be lost."),(0,s.kt)("h2",{id:"filesystem-api"},"Filesystem API"),(0,s.kt)("p",null,"Fortunately, saving them to the filesystem only takes a few steps. Begin by opening the ",(0,s.kt)("inlineCode",{parentName:"p"},"usePhotoGallery")," function (",(0,s.kt)("inlineCode",{parentName:"p"},"src/composables/usePhotoGallery.ts"),"), and get access to the ",(0,s.kt)("inlineCode",{parentName:"p"},"writeFile")," method from the ",(0,s.kt)("inlineCode",{parentName:"p"},"FileSystem")," class:"),(0,s.kt)("p",null,"Next, create a couple of new functions. The Filesystem API requires that files written to disk are passed in as base64 data, so this helper function will be used in a moment to assist with that:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const convertBlobToBase64 = (blob: Blob) => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.onerror = reject;\n  reader.onload = () => {\n      resolve(reader.result);\n  };\n  reader.readAsDataURL(blob);\n});\n")),(0,s.kt)("p",null,"Next, add a function to save the photo to the filesystem. We pass in the ",(0,s.kt)("inlineCode",{parentName:"p"},"cameraPhoto")," object, which represents the newly captured device photo, as well as the fileName, which will provide a path for the file to be stored to."),(0,s.kt)("p",null,"Next we use the Capacitor ",(0,s.kt)("a",{parentName:"p",href:"https://capacitor.ionicframework.com/docs/apis/filesystem"},"Filesystem API")," to save the photo to the filesystem. We start by converting the photo to base64 format, then feed the data to the Filesystem\u2019s ",(0,s.kt)("inlineCode",{parentName:"p"},"writeFile")," function:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const savePicture = async (photo: CameraPhoto, fileName: string): Promise<Photo> => {\n  let base64Data: string;\n\n  // Fetch the photo, read as a blob, then convert to base64 format\n  const response = await fetch(photo.webPath!);\n  const blob = await response.blob();\n  base64Data = await convertBlobToBase64(blob) as string;\n\n  const savedFile = await Filesystem.writeFile({\n    path: fileName,\n    data: base64Data,\n    directory: Directory.Data\n  });\n\n  // Use webPath to display the new image instead of base64 since it's\n  // already loaded into memory\n  return {\n    filepath: fileName,\n    webviewPath: photo.webPath\n  };\n}\n")),(0,s.kt)("p",null,"Last, update the ",(0,s.kt)("inlineCode",{parentName:"p"},"takePhoto")," function to call ",(0,s.kt)("inlineCode",{parentName:"p"},"savePicture"),". Once the photo has been saved, insert it into the front of reactive ",(0,s.kt)("inlineCode",{parentName:"p"},"photos")," array:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const takePhoto = async () => {\n  const cameraPhoto = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n    source: CameraSource.Camera,\n    quality: 100\n  });\n\n  const fileName = new Date().getTime() + '.jpeg';\n  const savedFileImage = await savePicture(cameraPhoto, fileName);\n\n  photos.value = [savedFileImage, ...photos.value];\n};\n")),(0,s.kt)("p",null,"There we go! Each time a new photo is taken, it\u2019s now automatically saved to the filesystem."))}h.isMDXComponent=!0}}]);