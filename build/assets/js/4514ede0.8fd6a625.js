(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[90998],{44371:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return s},metadata:function(){return r},toc:function(){return l},default:function(){return h}});var o=a(22122),n=a(19756),i=(a(67294),a(3905)),s={sidebar_label:"Loading Photos"},r={unversionedId:"angular/your-first-app/loading-photos",id:"angular/your-first-app/loading-photos",isDocsHomePage:!1,title:"Loading Photos from the Filesystem",description:"We\u2019ve implemented photo taking and saving to the filesystem. There\u2019s one last piece of functionality missing: the photos are stored in the filesystem, but we need a way to save pointers to each file so that they can be displayed again in the photo gallery.",source:"@site/docs/angular/your-first-app/4-loading-photos.md",sourceDirName:"angular/your-first-app",slug:"/angular/your-first-app/loading-photos",permalink:"/docs/angular/your-first-app/loading-photos",editUrl:"https://github.com/ionic-team/ionic-docs/edit/main/docs/angular/your-first-app/4-loading-photos.md",version:"current",sidebar_label:"Loading Photos",sidebarPosition:4,frontMatter:{sidebar_label:"Loading Photos"},sidebar:"docs",previous:{title:"Saving Photos to the Filesystem",permalink:"/docs/angular/your-first-app/saving-photos"},next:{title:"Adding Mobile",permalink:"/docs/angular/your-first-app/adding-mobile"}},l=[{value:"Storage API",id:"storage-api",children:[]}],p={toc:l};function h(e){var t=e.components,a=(0,n.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,o.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We\u2019ve implemented photo taking and saving to the filesystem. There\u2019s one last piece of functionality missing: the photos are stored in the filesystem, but we need a way to save pointers to each file so that they can be displayed again in the photo gallery."),(0,i.kt)("p",null,"Fortunately, this is easy: we\u2019ll leverage the Capacitor ",(0,i.kt)("a",{parentName:"p",href:"https://capacitor.ionicframework.com/docs/apis/storage"},"Storage API")," to store our array of Photos in a key-value store."),(0,i.kt)("h2",{id:"storage-api"},"Storage API"),(0,i.kt)("p",null,"Begin by defining a constant variable that will act as the key for the store:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'export class PhotoService {\n  public photos: Photo[] = [];\n  private PHOTO_STORAGE: string = "photos";\n\n  // other code\n}\n')),(0,i.kt)("p",null,"Next, at the end of the ",(0,i.kt)("inlineCode",{parentName:"p"},"addNewToGallery")," function, add a call to ",(0,i.kt)("inlineCode",{parentName:"p"},"Storage.set()")," to save the Photos array. By adding it here, the Photos array is stored each time a new photo is taken. This way, it doesn\u2019t matter when the app user closes or switches to a different app - all photo data is saved."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"Storage.set({\n  key: this.PHOTO_STORAGE,\n  value: JSON.stringify(this.photos)\n});\n")),(0,i.kt)("p",null,"With the photo array data saved, create a function called ",(0,i.kt)("inlineCode",{parentName:"p"},"loadSaved()")," that can retrieve that data. We use the same key to retrieve the photos array in JSON format, then parse it into an array:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"public async loadSaved() {\n  // Retrieve cached photo array data\n  const photoList = await Storage.get({ key: this.PHOTO_STORAGE });\n  this.photos = JSON.parse(photoList.value) || [];\n\n  // more to come...\n}\n")),(0,i.kt)("p",null,"On mobile (coming up next!), we can directly set the source of an image tag - ",(0,i.kt)("inlineCode",{parentName:"p"},'<img src="x" />')," - to each photo file on the Filesystem, displaying them automatically. On the web, however, we must read each image from the Filesystem into base64 format, using a new ",(0,i.kt)("inlineCode",{parentName:"p"},"base64")," property on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Photo")," object. This is because the Filesystem API uses ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API"},"IndexedDB")," under the hood. Below is the code you need to add in the ",(0,i.kt)("inlineCode",{parentName:"p"},"loadSaved()")," function you just added:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Display the photo by reading into base64 format\nfor (let photo of this.photos) {\n  // Read each saved photo's data from the Filesystem\n  const readFile = await Filesystem.readFile({\n      path: photo.filepath,\n      directory: Directory.Data\n  });\n\n  // Web platform only: Load the photo as base64 data\n  photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;\n}\n")),(0,i.kt)("p",null,"After, call this new method in ",(0,i.kt)("inlineCode",{parentName:"p"},"tab2.page.ts")," so that when the user first navigates to Tab 2 (the Photo Gallery), all photos are loaded and displayed on the screen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"async ngOnInit() {\n  await this.photoService.loadSaved();\n}\n")),(0,i.kt)("p",null,"That\u2019s it! We\u2019ve built a complete Photo Gallery feature in our Ionic app that works on the web. Next up, we\u2019ll transform it into a mobile app for iOS and Android!"))}h.isMDXComponent=!0}}]);