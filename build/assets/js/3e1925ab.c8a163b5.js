(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[80378],{59096:function(n,t,e){"use strict";e.r(t),e.d(t,{frontMatter:function(){return d},metadata:function(){return s},toc:function(){return c},default:function(){return m}});var i=e(22122),l=e(19756),a=(e(67294),e(3905)),o=e(41395),r=e(58215),d={title:"ion-infinite-scroll",demoUrl:"/docs/demos/api/infinite-scroll/index.html",demoSourceUrl:"https://github.com/ionic-team/ionic-docs/tree/main/static/demos/api/infinite-scroll/index.html"},s={unversionedId:"api/infinite-scroll",id:"api/infinite-scroll",isDocsHomePage:!1,title:"ion-infinite-scroll",description:"The Infinite Scroll component calls an action to be performed when the user scrolls a specified distance from the bottom or top of the page.",source:"@site/docs/api/infinite-scroll.md",sourceDirName:"api",slug:"/api/infinite-scroll",permalink:"/docs/api/infinite-scroll",editUrl:"https://github.com/ionic-team/ionic-docs/edit/main/docs/api/infinite-scroll.md",version:"current",frontMatter:{title:"ion-infinite-scroll",demoUrl:"/docs/demos/api/infinite-scroll/index.html",demoSourceUrl:"https://github.com/ionic-team/ionic-docs/tree/main/static/demos/api/infinite-scroll/index.html"},sidebar:"api",previous:{title:"ion-row",permalink:"/docs/api/row"},next:{title:"ion-infinite-scroll-content",permalink:"/docs/api/infinite-scroll-content"}},c=[{value:"Infinite Scroll Content",id:"infinite-scroll-content",children:[]},{value:"Custom Content",id:"custom-content",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Properties",id:"properties",children:[{value:"disabled",id:"disabled",children:[]},{value:"position",id:"position",children:[]},{value:"threshold",id:"threshold",children:[]}]},{value:"Events",id:"events",children:[]},{value:"Methods",id:"methods",children:[{value:"complete",id:"complete",children:[]}]}],p={toc:c};function m(n){var t=n.components,e=(0,l.Z)(n,["components"]);return(0,a.kt)("wrapper",(0,i.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Infinite Scroll component calls an action to be performed when the user scrolls a specified distance from the bottom or top of the page."),(0,a.kt)("p",null,"The expression assigned to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ionInfinite")," event is called when the user reaches that defined distance. When this expression has finished any and all tasks, it should call the ",(0,a.kt)("inlineCode",{parentName:"p"},"complete()")," method on the infinite scroll instance."),(0,a.kt)("h2",{id:"infinite-scroll-content"},"Infinite Scroll Content"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ion-infinite-scroll")," component has the infinite scroll logic. It requires a child component in order to display content. Ionic uses its ",(0,a.kt)("inlineCode",{parentName:"p"},"ion-infinite-scroll-content")," component by default. This component displays the infinite scroll and changes the look depending on the infinite scroll's state. It displays a spinner that looks best based on the platform the user is on. However, the default spinner can be changed and text can be added by setting properties on the ",(0,a.kt)("inlineCode",{parentName:"p"},"ion-infinite-scroll-content")," component."),(0,a.kt)("h2",{id:"custom-content"},"Custom Content"),(0,a.kt)("p",null,"Separating the ",(0,a.kt)("inlineCode",{parentName:"p"},"ion-infinite-scroll")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ion-infinite-scroll-content")," components allows developers to create their own content components, if desired. This content can contain anything, from an SVG element to elements with unique CSS animations."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)(o.Z,{defaultValue:"angular",values:[{value:"angular",label:"ANGULAR"},{value:"javascript",label:"JAVASCRIPT"},{value:"stencil",label:"STENCIL"},{value:"vue",label:"VUE"}],mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"angular",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<ion-content>\n  <ion-button (click)="toggleInfiniteScroll()" expand="block">\n    Toggle Infinite Scroll\n  </ion-button>\n\n  <ion-list></ion-list>\n\n  <ion-infinite-scroll threshold="100px" (ionInfinite)="loadData($event)">\n    <ion-infinite-scroll-content\n      loadingSpinner="bubbles"\n      loadingText="Loading more data...">\n    </ion-infinite-scroll-content>\n  </ion-infinite-scroll>\n</ion-content>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Component, ViewChild } from '@angular/core';\nimport { IonInfiniteScroll } from '@ionic/angular';\n\n@Component({\n  selector: 'infinite-scroll-example',\n  templateUrl: 'infinite-scroll-example.html',\n  styleUrls: ['./infinite-scroll-example.css']\n})\nexport class InfiniteScrollExample {\n  @ViewChild(IonInfiniteScroll) infiniteScroll: IonInfiniteScroll;\n\n  constructor() {}\n\n  loadData(event) {\n    setTimeout(() => {\n      console.log('Done');\n      event.target.complete();\n\n      // App logic to determine if all data is loaded\n      // and disable the infinite scroll\n      if (data.length == 1000) {\n        event.target.disabled = true;\n      }\n    }, 500);\n  }\n\n  toggleInfiniteScroll() {\n    this.infiniteScroll.disabled = !this.infiniteScroll.disabled;\n  }\n}\n"))),(0,a.kt)(r.Z,{value:"javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<ion-content>\n  <ion-button onClick="toggleInfiniteScroll()" expand="block">\n    Toggle Infinite Scroll\n  </ion-button>\n\n  <ion-list></ion-list>\n\n  <ion-infinite-scroll threshold="100px" id="infinite-scroll">\n    <ion-infinite-scroll-content\n      loading-spinner="bubbles"\n      loading-text="Loading more data...">\n    </ion-infinite-scroll-content>\n  </ion-infinite-scroll>\n</ion-content>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const infiniteScroll = document.getElementById('infinite-scroll');\n\ninfiniteScroll.addEventListener('ionInfinite', function(event) {\n  setTimeout(function() {\n    console.log('Done');\n    event.target.complete();\n\n    // App logic to determine if all data is loaded\n    // and disable the infinite scroll\n    if (data.length == 1000) {\n      event.target.disabled = true;\n    }\n  }, 500);\n});\n\nfunction toggleInfiniteScroll() {\n  infiniteScroll.disabled = !infiniteScroll.disabled;\n}\n"))),(0,a.kt)(r.Z,{value:"stencil",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Component, State, h } from '@stencil/core';\n\n@Component({\n  tag: 'infinite-scroll-example',\n  styleUrl: 'infinite-scroll-example.css'\n})\nexport class InfiniteScrollExample {\n  private infiniteScroll: HTMLIonInfiniteScrollElement;\n\n  @State() data = [];\n\n  componentWillLoad() {\n    this.pushData();\n  }\n\n  pushData() {\n    const max = this.data.length + 20;\n    const min = max - 20;\n\n    for (var i = min; i < max; i++) {\n      this.data.push('Item ' + i);\n    }\n\n    // Stencil does not re-render when pushing to an array\n    // so create a new copy of the array\n    // https://stenciljs.com/docs/reactive-data#handling-arrays-and-objects\n    this.data = [\n      ...this.data\n    ];\n  }\n\n  loadData(ev) {\n    setTimeout(() => {\n      this.pushData();\n      console.log('Loaded data');\n      ev.target.complete();\n\n      // App logic to determine if all data is loaded\n      // and disable the infinite scroll\n      if (this.data.length == 1000) {\n        ev.target.disabled = true;\n      }\n    }, 500);\n  }\n\n  toggleInfiniteScroll() {\n    this.infiniteScroll.disabled = !this.infiniteScroll.disabled;\n  }\n\n  render() {\n    return [\n      <ion-content>\n        <ion-button onClick={() => this.toggleInfiniteScroll()} expand=\"block\">\n          Toggle Infinite Scroll\n        </ion-button>\n\n        <ion-list>\n          {this.data.map(item =>\n            <ion-item>\n              <ion-label>{item}</ion-label>\n            </ion-item>\n          )}\n        </ion-list>\n\n        <ion-infinite-scroll\n          ref={el => this.infiniteScroll = el}\n          onIonInfinite={(ev) => this.loadData(ev)}>\n          <ion-infinite-scroll-content\n            loadingSpinner=\"bubbles\"\n            loadingText=\"Loading more data...\">\n          </ion-infinite-scroll-content>\n        </ion-infinite-scroll>\n      </ion-content>\n    ];\n  }\n}\n"))),(0,a.kt)(r.Z,{value:"vue",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  <ion-page>\n    <ion-content class="ion-padding">\n      <ion-button @click="toggleInfiniteScroll" expand="block">\n        Toggle Infinite Scroll\n      </ion-button>\n    \n      <ion-list>\n        <ion-item v-for="item in items" :key="item">\n          <ion-label>{{ item }}</ion-label>\n        </ion-item>\n      </ion-list>\n    \n      <ion-infinite-scroll\n        @ionInfinite="loadData($event)" \n        threshold="100px" \n        id="infinite-scroll"\n        :disabled="isDisabled"\n      >\n        <ion-infinite-scroll-content\n          loading-spinner="bubbles"\n          loading-text="Loading more data...">\n        </ion-infinite-scroll-content>\n      </ion-infinite-scroll>\n    </ion-content>\n  </ion-page>\n</template>\n\n<script lang="ts">\nimport { \n  IonButton,\n  IonContent, \n  IonInfiniteScroll, \n  IonInfiniteScrollContent,\n  IonItem,\n  IonLabel,\n  IonList,\n  IonPage\n } from \'@ionic/vue\';\nimport { defineComponent, ref } from \'vue\';\n \nexport default defineComponent({\n  components: {\n    IonButton,\n    IonContent, \n    IonInfiniteScroll, \n    IonInfiniteScrollContent,\n    IonItem,\n    IonLabel,\n    IonList,\n    IonPage\n  },\n  setup() {\n    const isDisabled = ref(false);\n    const toggleInfiniteScroll = () => {\n      isDisabled.value = !isDisabled.value;\n    }\n    const items = ref([]);\n    const pushData = () => {\n      const max = items.value.length + 20;\n      const min = max - 20;\n      for (let i = min; i < max; i++) {\n        items.value.push(i);\n      }\n    }\n    \n    const loadData = (ev: CustomEvent) => {\n      setTimeout(() => {\n        pushData();\n        console.log(\'Loaded data\');\n        ev.target.complete();\n  \n        // App logic to determine if all data is loaded\n        // and disable the infinite scroll\n        if (items.value.length == 1000) {\n          ev.target.disabled = true;\n        }\n      }, 500);\n    }\n    \n    pushData();\n    \n    return {\n      isDisabled,\n      toggleInfiniteScroll,\n      loadData,\n      items\n    }\n  }\n});\n\n<\/script>\n')))),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"disabled"},"disabled"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Description")),(0,a.kt)("td",{parentName:"tr",align:null},"If ",(0,a.kt)("inlineCode",{parentName:"td"},"true"),", the infinite scroll will be hidden and scroll event listeners",(0,a.kt)("br",null),"will be removed.",(0,a.kt)("br",null),(0,a.kt)("br",null),"Set this to true to disable the infinite scroll from actively",(0,a.kt)("br",null),"trying to receive new data while scrolling. This is useful",(0,a.kt)("br",null),"when it is known that there is no more data that can be added, and",(0,a.kt)("br",null),"the infinite scroll is no longer needed.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Attribute")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"disabled"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Type")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Default")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"false"))))),(0,a.kt)("h3",{id:"position"},"position"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Description")),(0,a.kt)("td",{parentName:"tr",align:null},"The position of the infinite scroll element.",(0,a.kt)("br",null),"The value can be either ",(0,a.kt)("inlineCode",{parentName:"td"},"top")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"bottom"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Attribute")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"position"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Type")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'"bottom" \\| "top"'))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Default")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"'bottom'"))))),(0,a.kt)("h3",{id:"threshold"},"threshold"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Description")),(0,a.kt)("td",{parentName:"tr",align:null},"The threshold distance from the bottom",(0,a.kt)("br",null),"of the content to call the ",(0,a.kt)("inlineCode",{parentName:"td"},"infinite")," output event when scrolled.",(0,a.kt)("br",null),"The threshold value can be either a percent, or",(0,a.kt)("br",null),"in pixels. For example, use the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"10%")," for the ",(0,a.kt)("inlineCode",{parentName:"td"},"infinite"),(0,a.kt)("br",null),"output event to get called when the user has scrolled 10%",(0,a.kt)("br",null),"from the bottom of the page. Use the value ",(0,a.kt)("inlineCode",{parentName:"td"},"100px")," when the",(0,a.kt)("br",null),"scroll is within 100 pixels from the bottom of the page.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Attribute")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"threshold"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Type")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Default")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"'15%'"))))),(0,a.kt)("h2",{id:"events"},"Events"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"ionInfinite")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when the scroll reaches")))),(0,a.kt)("p",null,"the threshold distance. From within your infinite handler,\nyou must call the infinite scroll's ",(0,a.kt)("inlineCode",{parentName:"p"},"complete()")," method when\nyour async operation has completed. |"),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"complete"},"complete"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Description")),(0,a.kt)("td",{parentName:"tr",align:null},"Call ",(0,a.kt)("inlineCode",{parentName:"td"},"complete()")," within the ",(0,a.kt)("inlineCode",{parentName:"td"},"ionInfinite")," output event handler when",(0,a.kt)("br",null),"your async operation has completed. For example, the ",(0,a.kt)("inlineCode",{parentName:"td"},"loading"),(0,a.kt)("br",null),"state is while the app is performing an asynchronous operation,",(0,a.kt)("br",null),"such as receiving more data from an AJAX request to add more items",(0,a.kt)("br",null),"to a data list. Once the data has been received and UI updated, you",(0,a.kt)("br",null),"then call this method to signify that the loading has completed.",(0,a.kt)("br",null),"This method will change the infinite scroll's state from ",(0,a.kt)("inlineCode",{parentName:"td"},"loading"),(0,a.kt)("br",null),"to ",(0,a.kt)("inlineCode",{parentName:"td"},"enabled"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Signature")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"complete() => Promise<void>"))))))}m.isMDXComponent=!0}}]);