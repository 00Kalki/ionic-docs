(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[30754],{81065:function(e,t,o){"use strict";o.r(t),o.d(t,{frontMatter:function(){return s},metadata:function(){return r},toc:function(){return l},default:function(){return d}});var n=o(22122),i=o(19756),a=(o(67294),o(3905)),s={},r={unversionedId:"vue/your-first-app/adding-mobile",id:"vue/your-first-app/adding-mobile",isDocsHomePage:!1,title:"Adding Mobile",description:"Our photo gallery app won\u2019t be complete until it runs on iOS, Android, and the web - all using one codebase. All it takes is some small logic changes to support mobile platforms, installing some native tooling, then running the app on a device. Let\u2019s go!",source:"@site/docs/vue/your-first-app/5-adding-mobile.md",sourceDirName:"vue/your-first-app",slug:"/vue/your-first-app/adding-mobile",permalink:"/docs/vue/your-first-app/adding-mobile",editUrl:"https://github.com/ionic-team/ionic-docs/edit/main/docs/vue/your-first-app/5-adding-mobile.md",version:"current",sidebarPosition:5,frontMatter:{},sidebar:"docs",previous:{title:"Loading Photos from the Filesystem",permalink:"/docs/vue/your-first-app/loading-photos"},next:{title:"Deploying to iOS and Android",permalink:"/docs/vue/your-first-app/deploying-mobile"}},l=[{value:"Platform-specific Logic",id:"platform-specific-logic",children:[]}],p={toc:l};function d(e){var t=e.components,o=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Our photo gallery app won\u2019t be complete until it runs on iOS, Android, and the web - all using one codebase. All it takes is some small logic changes to support mobile platforms, installing some native tooling, then running the app on a device. Let\u2019s go!"),(0,a.kt)("p",null,'Let\u2019s start with making some small code changes - then our app will "just work" when we deploy it to a device.'),(0,a.kt)("h2",{id:"platform-specific-logic"},"Platform-specific Logic"),(0,a.kt)("p",null,"First, we\u2019ll update the photo saving functionality to support mobile. We'll run slightly different code depending on the platform - mobile or web. Import the ",(0,a.kt)("inlineCode",{parentName:"p"},"Platform")," API from Ionic Vue:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { isPlatform } from '@ionic/vue';\n")),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"savePicture"),' function, check which platform the app is running on. If it\u2019s "hybrid" (Capacitor, the native runtime), then read the photo file into base64 format using the ',(0,a.kt)("inlineCode",{parentName:"p"},"readFile")," method. Also, return the complete file path to the photo using the Filesystem API. When setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"webviewPath"),", use the special ",(0,a.kt)("inlineCode",{parentName:"p"},"Capacitor.convertFileSrc")," method (",(0,a.kt)("a",{parentName:"p",href:"https://capacitorjs.com/docs/basics/utilities#convertfilesrc"},"details here"),"). Otherwise, use the same logic as before when running the app on the web."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const savePicture = async (photo: CameraPhoto, fileName: string): Promise<UserPhoto> => {\n  let base64Data: string;\n  // \"hybrid\" will detect mobile - iOS or Android\n  if (isPlatform('hybrid')) {\n    const file = await Filesystem.readFile({\n      path: photo.path!\n    });\n    base64Data = file.data;\n  } else {\n    // Fetch the photo, read as a blob, then convert to base64 format\n    const response = await fetch(photo.webPath!);\n    const blob = await response.blob();\n    base64Data = await convertBlobToBase64(blob) as string;\n  }\n  const savedFile = await Filesystem.writeFile({\n    path: fileName,\n    data: base64Data,\n    directory: Directory.Data\n  });\n\n  if (isPlatform('hybrid')) {\n    // Display the new image by rewriting the 'file://' path to HTTP\n    // Details: https://ionicframework.com/docs/building/webview#file-protocol\n    return {\n      filepath: savedFile.uri,\n      webviewPath: Capacitor.convertFileSrc(savedFile.uri),\n    };\n  }\n  else {\n    // Use webPath to display the new image instead of base64 since it's\n    // already loaded into memory\n    return {\n      filepath: fileName,\n      webviewPath: photo.webPath\n    };\n  }\n};\n")),(0,a.kt)("p",null,"Next, add a new bit of logic in the ",(0,a.kt)("inlineCode",{parentName:"p"},"loadSaved")," function. On mobile, we can directly point to each photo file on the Filesystem and display them automatically. On the web, however, we must read each image from the Filesystem into base64 format. This is because the Filesystem API uses ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API"},"IndexedDB")," under the hood. Update the ",(0,a.kt)("inlineCode",{parentName:"p"},"loadSaved")," function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const loadSaved = async () => {\n  const photoList = await Storage.get({ key: PHOTO_STORAGE });\n  const photosInStorage = photoList.value ? JSON.parse(photoList.value) : [];\n\n  // If running on the web...\n  if (!isPlatform('hybrid')) {\n    for (const photo of photosInStorage) {\n      const file = await Filesystem.readFile({\n        path: photo.filepath,\n        directory: Directory.Data\n      });\n      // Web platform only: Load the photo as base64 data\n      photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n    }\n  }\n\n  photos.value = photosInStorage;\n}\n")),(0,a.kt)("p",null,"Our Photo Gallery now consists of one codebase that runs on the web, Android, and iOS. Next up, the part you\u2019ve been waiting for - deploying the app to a device."))}d.isMDXComponent=!0}}]);