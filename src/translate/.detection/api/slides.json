{
  "filePath": "./src/components/slides/slides.tsx",
  "encapsulation": "none",
  "tag": "ion-slides",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "options",
      "type": "any",
      "mutable": false,
      "attr": "options",
      "reflectToAttr": false,
      "docs": "Options to pass to the swiper instance.\nSee https://swiperjs.com/swiper-api for valid options",
      "docsTags": [],
      "default": "{}",
      "values": [
        {
          "type": "any"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "pager",
      "type": "boolean",
      "mutable": false,
      "attr": "pager",
      "reflectToAttr": false,
      "docs": "If `true`, show the pagination.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "scrollbar",
      "type": "boolean",
      "mutable": false,
      "attr": "scrollbar",
      "reflectToAttr": false,
      "docs": "If `true`, show the scrollbar.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "getActiveIndex",
      "returns": {
        "type": "Promise<number>",
        "docs": ""
      },
      "signature": "getActiveIndex() => Promise<number>",
      "parameters": [],
      "docs": "Get the index of the active slide.",
      "docsTags": []
    },
    {
      "name": "getPreviousIndex",
      "returns": {
        "type": "Promise<number>",
        "docs": ""
      },
      "signature": "getPreviousIndex() => Promise<number>",
      "parameters": [],
      "docs": "Get the index of the previous slide.",
      "docsTags": []
    },
    {
      "name": "getSwiper",
      "returns": {
        "type": "Promise<any>",
        "docs": ""
      },
      "signature": "getSwiper() => Promise<any>",
      "parameters": [],
      "docs": "Get the Swiper instance.\nUse this to access the full Swiper API.\nSee https://swiperjs.com/swiper-api for all API options.",
      "docsTags": []
    },
    {
      "name": "isBeginning",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "isBeginning() => Promise<boolean>",
      "parameters": [],
      "docs": "Get whether or not the current slide is the first slide.",
      "docsTags": []
    },
    {
      "name": "isEnd",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "isEnd() => Promise<boolean>",
      "parameters": [],
      "docs": "Get whether or not the current slide is the last slide.",
      "docsTags": []
    },
    {
      "name": "length",
      "returns": {
        "type": "Promise<number>",
        "docs": ""
      },
      "signature": "length() => Promise<number>",
      "parameters": [],
      "docs": "Get the total number of slides.",
      "docsTags": []
    },
    {
      "name": "lockSwipeToNext",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "lockSwipeToNext(lock: boolean) => Promise<void>",
      "parameters": [],
      "docs": "Lock or unlock the ability to slide to the next slide.",
      "docsTags": [
        {
          "name": "param",
          "text": "lock If `true`, disable swiping to the next slide."
        }
      ]
    },
    {
      "name": "lockSwipeToPrev",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "lockSwipeToPrev(lock: boolean) => Promise<void>",
      "parameters": [],
      "docs": "Lock or unlock the ability to slide to the previous slide.",
      "docsTags": [
        {
          "name": "param",
          "text": "lock If `true`, disable swiping to the previous slide."
        }
      ]
    },
    {
      "name": "lockSwipes",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "lockSwipes(lock: boolean) => Promise<void>",
      "parameters": [],
      "docs": "Lock or unlock the ability to slide to the next or previous slide.",
      "docsTags": [
        {
          "name": "param",
          "text": "lock If `true`, disable swiping to the next and previous slide."
        }
      ]
    },
    {
      "name": "slideNext",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "slideNext(speed?: number | undefined, runCallbacks?: boolean | undefined) => Promise<void>",
      "parameters": [],
      "docs": "Transition to the next slide.",
      "docsTags": [
        {
          "name": "param",
          "text": "speed The transition duration (in ms)."
        },
        {
          "name": "param",
          "text": "runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events."
        }
      ]
    },
    {
      "name": "slidePrev",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "slidePrev(speed?: number | undefined, runCallbacks?: boolean | undefined) => Promise<void>",
      "parameters": [],
      "docs": "Transition to the previous slide.",
      "docsTags": [
        {
          "name": "param",
          "text": "speed The transition duration (in ms)."
        },
        {
          "name": "param",
          "text": "runCallbacks If true, the transition will produce the [Transition/SlideChange][Start/End] transition events."
        }
      ]
    },
    {
      "name": "slideTo",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "slideTo(index: number, speed?: number | undefined, runCallbacks?: boolean | undefined) => Promise<void>",
      "parameters": [],
      "docs": "Transition to the specified slide.",
      "docsTags": [
        {
          "name": "param",
          "text": "index The index of the slide to transition to."
        },
        {
          "name": "param",
          "text": "speed The transition duration (in ms)."
        },
        {
          "name": "param",
          "text": "runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events."
        }
      ]
    },
    {
      "name": "startAutoplay",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "startAutoplay() => Promise<void>",
      "parameters": [],
      "docs": "Start auto play.",
      "docsTags": []
    },
    {
      "name": "stopAutoplay",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "stopAutoplay() => Promise<void>",
      "parameters": [],
      "docs": "Stop auto play.",
      "docsTags": []
    },
    {
      "name": "update",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "update() => Promise<void>",
      "parameters": [],
      "docs": "Update the underlying slider implementation. Call this if you've added or removed\nchild slides.",
      "docsTags": []
    },
    {
      "name": "updateAutoHeight",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "updateAutoHeight(speed?: number | undefined) => Promise<void>",
      "parameters": [],
      "docs": "Force swiper to update its height (when autoHeight is enabled) for the duration\nequal to 'speed' parameter.",
      "docsTags": [
        {
          "name": "param",
          "text": "speed The transition duration (in ms)."
        }
      ]
    }
  ],
  "events": [
    {
      "event": "ionSlideDidChange",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the active slide has changed.",
      "docsTags": []
    },
    {
      "event": "ionSlideDoubleTap",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user double taps on the slide's container.",
      "docsTags": []
    },
    {
      "event": "ionSlideDrag",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the slider is actively being moved.",
      "docsTags": []
    },
    {
      "event": "ionSlideNextEnd",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the next slide has ended.",
      "docsTags": []
    },
    {
      "event": "ionSlideNextStart",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the next slide has started.",
      "docsTags": []
    },
    {
      "event": "ionSlidePrevEnd",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the previous slide has ended.",
      "docsTags": []
    },
    {
      "event": "ionSlidePrevStart",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the previous slide has started.",
      "docsTags": []
    },
    {
      "event": "ionSlideReachEnd",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the slider is at the last slide.",
      "docsTags": []
    },
    {
      "event": "ionSlideReachStart",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the slider is at its initial position.",
      "docsTags": []
    },
    {
      "event": "ionSlidesDidLoad",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after Swiper initialization",
      "docsTags": []
    },
    {
      "event": "ionSlideTap",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user taps/clicks on the slide's container.",
      "docsTags": []
    },
    {
      "event": "ionSlideTouchEnd",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user releases the touch.",
      "docsTags": []
    },
    {
      "event": "ionSlideTouchStart",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user first touches the slider.",
      "docsTags": []
    },
    {
      "event": "ionSlideTransitionEnd",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the slide transition has ended.",
      "docsTags": []
    },
    {
      "event": "ionSlideTransitionStart",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the slide transition has started.",
      "docsTags": []
    },
    {
      "event": "ionSlideWillChange",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the active slide has changed.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--bullet-background",
      "annotation": "prop",
      "docs": "Background of the pagination bullets"
    },
    {
      "name": "--bullet-background-active",
      "annotation": "prop",
      "docs": "Background of the active pagination bullet"
    },
    {
      "name": "--progress-bar-background",
      "annotation": "prop",
      "docs": "Background of the pagination progress-bar"
    },
    {
      "name": "--progress-bar-background-active",
      "annotation": "prop",
      "docs": "Background of the active pagination progress-bar"
    },
    {
      "name": "--scroll-bar-background",
      "annotation": "prop",
      "docs": "Background of the pagination scroll-bar"
    },
    {
      "name": "--scroll-bar-background-active",
      "annotation": "prop",
      "docs": "Background of the active pagination scroll-bar"
    }
  ],
  "slots": [],
  "parts": [],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}