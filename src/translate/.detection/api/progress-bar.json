{
  "filePath": "./src/components/progress-bar/progress-bar.tsx",
  "encapsulation": "shadow",
  "tag": "ion-progress-bar",
  "readme": "# ion-progress-bar\n\nProgress bars inform users about the status of ongoing processes, such as loading an app, submitting a form, or saving updates. There are two types of progress bars: `determinate` and `indeterminate`.\n\n## Progress Type\n\n### Determinate\n\nDeterminate is the default type. It should be used when the percentage of an operation is known. The progress is represented by setting the `value` property. This can be used to show the progress increasing from 0 to 100% of the track.\n\nIf the `buffer` property is set, a buffer stream will show with animated circles to indicate activity. The value of the `buffer` property will also be represented by how much visible track there is. If the value of `buffer` is less than the `value` property, there will be no visible track. If `buffer` is equal to `1` then the buffer stream will be hidden.\n\n### Indeterminate\n\nThe indeterminate type should be used when it is unknown how long the process will take. The progress bar is not tied to the `value`, instead it continually slides along the track until the process is complete.\n",
  "docs": "Progress bars inform users about the status of ongoing processes, such as loading an app, submitting a form, or saving updates. There are two types of progress bars: `determinate` and `indeterminate`.",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "part",
      "text": "progress - The progress bar that shows the current value when `type` is `\"determinate\"` and slides back and forth when `type` is `\"indeterminate\"`."
    },
    {
      "name": "part",
      "text": "stream - The animated circles that appear while buffering. This only shows when `buffer` is set and `type` is `\"determinate\"`."
    },
    {
      "name": "part",
      "text": "track - The track bar behind the progress bar. If the `buffer` property is set and `type` is `\"determinate\"` the track will be the\nwidth of the `buffer` value."
    }
  ],
  "usage": {
    "angular": "```html\n<!-- Default Progressbar -->\n<ion-progress-bar></ion-progress-bar>\n\n<!-- Default Progressbar with 50 percent -->\n<ion-progress-bar value=\"0.5\"></ion-progress-bar>\n\n<!-- Colorize Progressbar -->\n<ion-progress-bar color=\"primary\" value=\"0.5\"></ion-progress-bar>\n<ion-progress-bar color=\"secondary\" value=\"0.5\"></ion-progress-bar>\n\n<!-- Other types -->\n<ion-progress-bar value=\"0.25\" buffer=\"0.5\"></ion-progress-bar>\n<ion-progress-bar type=\"indeterminate\"></ion-progress-bar>\n<ion-progress-bar type=\"indeterminate\" reversed=\"true\"></ion-progress-bar>\n```\n",
    "javascript": "```html\n<!-- Default Progressbar -->\n<ion-progress-bar></ion-progress-bar>\n\n<!-- Default Progressbar with 50 percent -->\n<ion-progress-bar value=\"0.5\"></ion-progress-bar>\n\n<!-- Colorize Progressbar -->\n<ion-progress-bar color=\"primary\" value=\"0.5\"></ion-progress-bar>\n<ion-progress-bar color=\"secondary\" value=\"0.5\"></ion-progress-bar>\n\n<!-- Other types -->\n<ion-progress-bar value=\"0.25\" buffer=\"0.5\"></ion-progress-bar>\n<ion-progress-bar type=\"indeterminate\"></ion-progress-bar>\n<ion-progress-bar type=\"indeterminate\" reversed=\"true\"></ion-progress-bar>\n```\n",
    "react": "```tsx\nimport React from 'react';\nimport { IonProgressBar, IonContent } from '@ionic/react';\n\nexport const ProgressbarExample: React.FC = () => (\n  <IonContent>\n    {/*-- Default Progressbar --*/}\n    <IonProgressBar></IonProgressBar><br />\n\n    {/*-- Default Progressbar with 50 percent --*/}\n    <IonProgressBar value={0.5}></IonProgressBar><br />\n\n    {/*-- Colorize Progressbar --*/}\n    <IonProgressBar color=\"primary\" value={0.5}></IonProgressBar><br />\n    <IonProgressBar color=\"secondary\" value={0.5}></IonProgressBar><br />\n\n    {/*-- Other types --*/}\n    <IonProgressBar value={0.25} buffer={0.5}></IonProgressBar><br />\n    <IonProgressBar type=\"indeterminate\"></IonProgressBar><br />\n    <IonProgressBar type=\"indeterminate\" reversed={true}></IonProgressBar><br />\n  </IonContent>\n);\n```\n",
    "stencil": "```tsx\nimport { Component, h } from '@stencil/core';\n\n@Component({\n  tag: 'progress-bar-example',\n  styleUrl: 'progress-bar-example.css'\n})\nexport class ProgressBarExample {\n  render() {\n    return [\n      // Default Progressbar\n      <ion-progress-bar></ion-progress-bar>,\n\n      // Default Progressbar with 50 percent\n      <ion-progress-bar value={0.5}></ion-progress-bar>,\n\n      // Colorize Progressbar\n      <ion-progress-bar color=\"primary\" value={0.5}></ion-progress-bar>,\n      <ion-progress-bar color=\"secondary\" value={0.5}></ion-progress-bar>,\n\n      // Other types\n      <ion-progress-bar value={0.25} buffer={0.5}></ion-progress-bar>,\n      <ion-progress-bar type=\"indeterminate\"></ion-progress-bar>,\n      <ion-progress-bar type=\"indeterminate\" reversed={true}></ion-progress-bar>\n    ];\n  }\n}\n```\n",
    "vue": "```html\n<template>\n  <!-- Default Progressbar -->\n  <ion-progress-bar></ion-progress-bar>\n\n  <!-- Default Progressbar with 50 percent -->\n  <ion-progress-bar value=\"0.5\"></ion-progress-bar>\n\n  <!-- Colorize Progressbar -->\n  <ion-progress-bar color=\"primary\" value=\"0.5\"></ion-progress-bar>\n  <ion-progress-bar color=\"secondary\" value=\"0.5\"></ion-progress-bar>\n\n  <!-- Other types -->\n  <ion-progress-bar value=\"0.25\" buffer=\"0.5\"></ion-progress-bar>\n  <ion-progress-bar type=\"indeterminate\"></ion-progress-bar>\n  <ion-progress-bar type=\"indeterminate\" reversed=\"true\"></ion-progress-bar>\n</template>\n\n<script>\nimport { IonProgressBar } from '@ionic/vue';\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  components: { IonProgressBar }\n});\n</script>\n```\n"
  },
  "props": [
    {
      "name": "buffer",
      "type": "number",
      "mutable": false,
      "attr": "buffer",
      "reflectToAttr": false,
      "docs": "If the buffer and value are smaller than 1, the buffer circles will show.\nThe buffer should be between [0, 1].",
      "docsTags": [],
      "default": "1",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "color",
      "type": "string | undefined",
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "reversed",
      "type": "boolean",
      "mutable": false,
      "attr": "reversed",
      "reflectToAttr": false,
      "docs": "If true, reverse the progress bar direction.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "type",
      "type": "\"determinate\" | \"indeterminate\"",
      "mutable": false,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "The state of the progress bar, based on if the time the process takes is known or not.\nDefault options are: `\"determinate\"` (no animation), `\"indeterminate\"` (animate from left to right).",
      "docsTags": [],
      "default": "'determinate'",
      "values": [
        {
          "value": "determinate",
          "type": "string"
        },
        {
          "value": "indeterminate",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "value",
      "type": "number",
      "mutable": false,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value determines how much of the active bar should display when the\n`type` is `\"determinate\"`.\nThe value should be between [0, 1].",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "methods": [],
  "events": [],
  "listeners": [],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the progress track, or the buffer bar if `buffer` is set"
    },
    {
      "name": "--buffer-background",
      "annotation": "prop",
      "docs": "DEPRECATED, use `--background` instead"
    },
    {
      "name": "--progress-background",
      "annotation": "prop",
      "docs": "Background of the progress bar representing the current value"
    }
  ],
  "slots": [],
  "parts": [
    {
      "name": "progress",
      "docs": "The progress bar that shows the current value when `type` is `\"determinate\"` and slides back and forth when `type` is `\"indeterminate\"`."
    },
    {
      "name": "stream",
      "docs": "The animated circles that appear while buffering. This only shows when `buffer` is set and `type` is `\"determinate\"`."
    },
    {
      "name": "track",
      "docs": "The track bar behind the progress bar. If the `buffer` property is set and `type` is `\"determinate\"` the track will be the\nwidth of the `buffer` value."
    }
  ],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}