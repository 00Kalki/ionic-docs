{
  "filePath": "./src/components/picker/picker.tsx",
  "encapsulation": "scoped",
  "tag": "ion-picker",
  "readme": "# ion-picker\n\nA Picker is a dialog that displays a row of buttons and columns underneath. It appears on top of the app's content, and at the bottom of the viewport.\n\n## Interfaces\n\n### PickerButton\n\n```typescript\ninterface PickerButton {\n  text?: string;\n  role?: string;\n  cssClass?: string | string[];\n  handler?: (value: any) => boolean | void;\n}\n```\n\n### PickerColumn\n\n```typescript\ninterface PickerColumn {\n  name: string;\n  align?: string;\n  selectedIndex?: number;\n  prevSelected?: number;\n  prefix?: string;\n  suffix?: string;\n  options: PickerColumnOption[];\n  cssClass?: string | string[];\n  columnWidth?: string;\n  prefixWidth?: string;\n  suffixWidth?: string;\n  optionsWidth?: string;\n  refresh?: () => void;\n}\n```\n\n### PickerColumnOption\n\n```typescript\ninterface PickerColumnOption {\n  text?: string;\n  value?: any;\n  disabled?: boolean;\n  duration?: number;\n  transform?: string;\n  selected?: boolean;\n}\n```\n\n### PickerOptions\n\n```typescript\ninterface PickerOptions {\n  columns: PickerColumn[];\n  buttons?: PickerButton[];\n  cssClass?: string | string[];\n  showBackdrop?: boolean;\n  backdropDismiss?: boolean;\n  animated?: boolean;\n\n  mode?: Mode;\n  keyboardClose?: boolean;\n  id?: string;\n  htmlAttributes?: PickerAttributes;\n\n  enterAnimation?: AnimationBuilder;\n  leaveAnimation?: AnimationBuilder;\n}\n```\n\n### PickerAttributes\n\n```typescript\ninterface PickerAttributes extends JSXBase.HTMLAttributes<HTMLElement> {}\n```\n",
  "docs": "A Picker is a dialog that displays a row of buttons and columns underneath. It appears on top of the app's content, and at the bottom of the viewport.",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    }
  ],
  "usage": {
    "react": "```tsx\n/* Using with useIonPicker Hook */\n\nimport React, { useState } from 'react';\nimport { IonButton, IonContent, IonPage, useIonPicker } from '@ionic/react';\n\nconst PickerExample: React.FC = () => {\n  const [present] = useIonPicker();\n  const [value, setValue] = useState('');\n  return (\n    <IonPage>\n      <IonContent>\n        <IonButton\n          expand=\"block\"\n          onClick={() =>\n            present({\n              buttons: [\n                {\n                  text: 'Confirm',\n                  handler: (selected) => {\n                    setValue(selected.animal.value)\n                  },\n                },\n              ],\n              columns: [\n                {\n                  name: 'animal',\n                  options: [\n                    { text: 'Dog', value: 'dog' },\n                    { text: 'Cat', value: 'cat' },\n                    { text: 'Bird', value: 'bird' },\n                  ],\n                },\n              ],\n            })\n          }\n        >\n          Show Picker\n        </IonButton>\n        <IonButton\n          expand=\"block\"\n          onClick={() =>\n            present(\n              [\n                {\n                  name: 'animal',\n                  options: [\n                    { text: 'Dog', value: 'dog' },\n                    { text: 'Cat', value: 'cat' },\n                    { text: 'Bird', value: 'bird' },\n                  ],\n                },\n                {\n                  name: 'vehicle',\n                  options: [\n                    { text: 'Car', value: 'car' },\n                    { text: 'Truck', value: 'truck' },\n                    { text: 'Bike', value: 'bike' },\n                  ],\n                },\n              ],\n              [\n                {\n                  text: 'Confirm',\n                  handler: (selected) => {\n                    setValue(`${selected.animal.value}, ${selected.vehicle.value}`)\n                  },\n                },\n              ]\n            )\n          }\n        >\n          Show Picker using params\n        </IonButton>\n        {value && (\n          <div>Selected Value: {value}</div>\n        )}\n      </IonContent>\n    </IonPage>\n  );\n};\n```",
    "vue": "```vue\n<template>\n  <div>\n    <ion-button @click=\"openPicker\">SHOW PICKER</ion-button>\n    <p v-if=\"picked.animal\">picked: {{ picked.animal.text }}</p>\n  </div>\n</template>\n\n<script>\nimport { IonButton, pickerController } from \"@ionic/vue\";\nexport default {\n  components: {\n    IonButton,\n  },\n  data() {\n    return {\n      pickingOptions: {\n        name: \"animal\",\n        options: [\n          { text: \"Dog\", value: \"dog\" },\n          { text: \"Cat\", value: \"cat\" },\n          { text: \"Bird\", value: \"bird\" },\n        ],\n      },\n      picked: {\n        animal: \"\",\n      },\n    };\n  },\n  methods: {\n    async openPicker() {\n      const picker = await pickerController.create({\n        columns: [this.pickingOptions],\n        buttons: [\n          {\n            text: \"Cancel\",\n            role: \"cancel\",\n          },\n          {\n            text: \"Confirm\",\n            handler: (value) => {\n              this.picked = value;\n              console.log(`Got Value ${value}`);\n            },\n          },\n        ],\n      });\n      await picker.present();\n    },\n  },\n};\n</script>\n```\n"
  },
  "props": [
    {
      "name": "animated",
      "type": "boolean",
      "mutable": false,
      "attr": "animated",
      "reflectToAttr": false,
      "docs": "If `true`, the picker will animate.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "backdropDismiss",
      "type": "boolean",
      "mutable": false,
      "attr": "backdrop-dismiss",
      "reflectToAttr": false,
      "docs": "If `true`, the picker will be dismissed when the backdrop is clicked.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "buttons",
      "type": "PickerButton[]",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Array of buttons to be displayed at the top of the picker.",
      "docsTags": [],
      "default": "[]",
      "values": [
        {
          "type": "PickerButton[]"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "columns",
      "type": "PickerColumn[]",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Array of columns to be displayed in the picker.",
      "docsTags": [],
      "default": "[]",
      "values": [
        {
          "type": "PickerColumn[]"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "cssClass",
      "type": "string | string[] | undefined",
      "mutable": false,
      "attr": "css-class",
      "reflectToAttr": false,
      "docs": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "string[]"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "duration",
      "type": "number",
      "mutable": false,
      "attr": "duration",
      "reflectToAttr": false,
      "docs": "Number of milliseconds to wait before dismissing the picker.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "enterAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Animation to use when the picker is presented.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "htmlAttributes",
      "type": "PickerAttributes | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Additional attributes to pass to the picker.",
      "docsTags": [],
      "values": [
        {
          "type": "PickerAttributes"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "keyboardClose",
      "type": "boolean",
      "mutable": false,
      "attr": "keyboard-close",
      "reflectToAttr": false,
      "docs": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "leaveAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Animation to use when the picker is dismissed.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showBackdrop",
      "type": "boolean",
      "mutable": false,
      "attr": "show-backdrop",
      "reflectToAttr": false,
      "docs": "If `true`, a backdrop will be displayed behind the picker.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "dismiss",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "dismiss(data?: any, role?: string | undefined) => Promise<boolean>",
      "parameters": [],
      "docs": "Dismiss the picker overlay after it has been presented.",
      "docsTags": [
        {
          "name": "param",
          "text": "data Any data to emit in the dismiss events."
        },
        {
          "name": "param",
          "text": "role The role of the element that is dismissing the picker.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the picker.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
        }
      ]
    },
    {
      "name": "getColumn",
      "returns": {
        "type": "Promise<PickerColumn | undefined>",
        "docs": ""
      },
      "signature": "getColumn(name: string) => Promise<PickerColumn | undefined>",
      "parameters": [],
      "docs": "Get the column that matches the specified name.",
      "docsTags": [
        {
          "name": "param",
          "text": "name The name of the column."
        }
      ]
    },
    {
      "name": "onDidDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<T>>",
        "docs": ""
      },
      "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the picker did dismiss.",
      "docsTags": []
    },
    {
      "name": "onWillDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<T>>",
        "docs": ""
      },
      "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the picker will dismiss.",
      "docsTags": []
    },
    {
      "name": "present",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "present() => Promise<void>",
      "parameters": [],
      "docs": "Present the picker overlay after it has been created.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "ionPickerDidDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the picker has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionPickerDidPresent",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the picker has presented.",
      "docsTags": []
    },
    {
      "event": "ionPickerWillDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the picker has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionPickerWillPresent",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the picker has presented.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--backdrop-opacity",
      "annotation": "prop",
      "docs": "Opacity of the backdrop"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the picker"
    },
    {
      "name": "--background-rgb",
      "annotation": "prop",
      "docs": "Background of the picker in rgb format"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Border color of the picker"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the picker"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Border style of the picker"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Border width of the picker"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the picker"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the picker"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the picker"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the picker"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the picker"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the picker"
    }
  ],
  "slots": [],
  "parts": [],
  "dependents": [],
  "dependencies": [
    "ion-backdrop",
    "ion-picker-column"
  ],
  "dependencyGraph": {
    "ion-picker": [
      "ion-backdrop",
      "ion-picker-column"
    ]
  }
}