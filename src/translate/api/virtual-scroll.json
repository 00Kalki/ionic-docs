{
  "filePath": "./src/components/virtual-scroll/virtual-scroll.tsx",
  "encapsulation": "none",
  "tag": "ion-virtual-scroll",
  "docs": "",
  "docsTags": [],
  "usage": {},
  "props": [
    {
      "name": "approxFooterHeight",
      "type": "number",
      "mutable": false,
      "attr": "approx-footer-height",
      "reflectToAttr": false,
      "docs": "The approximate width of each footer template's cell.\nThis dimension is used to help determine how many cells should\nbe created when initialized, and to help calculate the height of\nthe scrollable area. This height value can only use `px` units.\nNote that the actual rendered size of each cell comes from the\napp's CSS, whereas this approximation is used to help calculate\ninitial dimensions before the item has been rendered.",
      "docsTags": [],
      "default": "30",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "approxHeaderHeight",
      "type": "number",
      "mutable": false,
      "attr": "approx-header-height",
      "reflectToAttr": false,
      "docs": "The approximate height of each header template's cell.\nThis dimension is used to help determine how many cells should\nbe created when initialized, and to help calculate the height of\nthe scrollable area. This height value can only use `px` units.\nNote that the actual rendered size of each cell comes from the\napp's CSS, whereas this approximation is used to help calculate\ninitial dimensions before the item has been rendered.",
      "docsTags": [],
      "default": "30",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "approxItemHeight",
      "type": "number",
      "mutable": false,
      "attr": "approx-item-height",
      "reflectToAttr": false,
      "docs": "It is important to provide this\nif virtual item height will be significantly larger than the default\nThe approximate height of each virtual item template's cell.\nThis dimension is used to help determine how many cells should\nbe created when initialized, and to help calculate the height of\nthe scrollable area. This height value can only use `px` units.\nNote that the actual rendered size of each cell comes from the\napp's CSS, whereas this approximation is used to help calculate\ninitial dimensions before the item has been rendered.",
      "docsTags": [],
      "default": "45",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "footerFn",
      "type": "((item: any, index: number, items: any[]) => string | null | undefined) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Section footers and the data used within its given\ntemplate can be dynamically created by passing a function to `footerFn`.\nThe logic within the footer function can decide if the footer template\nshould be used, and what data to give to the footer template. The function\nmust return `null` if a footer cell shouldn't be created.",
      "docsTags": [],
      "values": [
        {
          "type": "((item: any, index: number, items: any[]) => string"
        },
        {
          "type": "null"
        },
        {
          "type": "undefined)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "footerHeight",
      "type": "((item: any, index: number) => number) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "An optional function that maps each item footer within their height.",
      "docsTags": [],
      "values": [
        {
          "type": "((item: any, index: number) => number)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "headerFn",
      "type": "((item: any, index: number, items: any[]) => string | null | undefined) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Section headers and the data used within its given\ntemplate can be dynamically created by passing a function to `headerFn`.\nFor example, a large list of contacts usually has dividers between each\nletter in the alphabet. App's can provide their own custom `headerFn`\nwhich is called with each record within the dataset. The logic within\nthe header function can decide if the header template should be used,\nand what data to give to the header template. The function must return\n`null` if a header cell shouldn't be created.",
      "docsTags": [],
      "values": [
        {
          "type": "((item: any, index: number, items: any[]) => string"
        },
        {
          "type": "null"
        },
        {
          "type": "undefined)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "headerHeight",
      "type": "((item: any, index: number) => number) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "An optional function that maps each item header within their height.",
      "docsTags": [],
      "values": [
        {
          "type": "((item: any, index: number) => number)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "itemHeight",
      "type": "((item: any, index: number) => number) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "An optional function that maps each item within their height.\nWhen this function is provides, heavy optimizations and fast path can be taked by\n`ion-virtual-scroll` leading to massive performance improvements.\n\nThis function allows to skip all DOM reads, which can be Doing so leads\nto massive performance",
      "docsTags": [],
      "values": [
        {
          "type": "((item: any, index: number) => number)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "items",
      "type": "any[] | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "The data that builds the templates within the virtual scroll.\nIt's important to note that when this data has changed, then the\nentire virtual scroll is reset, which is an expensive operation and\nshould be avoided if possible.",
      "docsTags": [],
      "values": [
        {
          "type": "any[]"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "nodeRender",
      "type": "((el: HTMLElement | null, cell: Cell, domIndex: number) => HTMLElement) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "NOTE: only Vanilla JS API.",
      "docsTags": [],
      "values": [
        {
          "type": "((el: HTMLElement"
        },
        {
          "type": "null, cell: Cell, domIndex: number) => HTMLElement)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "renderFooter",
      "type": "((item: any, index: number) => any) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "NOTE: only JSX API for stencil.\n\nProvide a render function for the footer to be rendered. Returns a JSX virtual-dom.",
      "docsTags": [],
      "values": [
        {
          "type": "((item: any, index: number) => any)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "renderHeader",
      "type": "((item: any, index: number) => any) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "NOTE: only JSX API for stencil.\n\nProvide a render function for the header to be rendered. Returns a JSX virtual-dom.",
      "docsTags": [],
      "values": [
        {
          "type": "((item: any, index: number) => any)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "renderItem",
      "type": "((item: any, index: number) => any) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "NOTE: only JSX API for stencil.\n\nProvide a render function for the items to be rendered. Returns a JSX virtual-dom.",
      "docsTags": [],
      "values": [
        {
          "type": "((item: any, index: number) => any)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "checkEnd",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "checkEnd() => Promise<void>",
      "parameters": [],
      "docs": "This method marks the tail the items array as dirty, so they can be re-rendered.\n\nIt's equivalent to calling:\n\n```js\nvirtualScroll.checkRange(lastItemLen);\n```",
      "docsTags": []
    },
    {
      "name": "checkRange",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "checkRange(offset: number, len?: number) => Promise<void>",
      "parameters": [],
      "docs": "This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\ndirty any time the content or their style changes.\n\nThe subset of items to be updated can are specifying by an offset and a length.",
      "docsTags": []
    },
    {
      "name": "positionForItem",
      "returns": {
        "type": "Promise<number>",
        "docs": ""
      },
      "signature": "positionForItem(index: number) => Promise<number>",
      "parameters": [],
      "docs": "Returns the position of the virtual item at the given index.",
      "docsTags": []
    }
  ],
  "events": [],
  "listeners": [
    {
      "event": "resize",
      "target": "window",
      "capture": false,
      "passive": true
    }
  ],
  "styles": [],
  "slots": [],
  "parts": [],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}