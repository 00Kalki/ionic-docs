{
  "filePath": "./src/components/datetime/datetime.tsx",
  "encapsulation": "shadow",
  "tag": "ion-datetime",
  "readme": "# ion-datetime\n\nDatetimes present a calendar interface and time wheel, making it easy for users to select dates and times. Datetimes are similar to the native `input` elements of `datetime-local`, however, Ionic Framework's Datetime component makes it easy to display the date and time in the a preferred format, and manage the datetime values.\n\n### Datetime Data\n\nHistorically, handling datetime values within JavaScript, or even within HTML\ninputs, has always been a challenge. Specifically, JavaScript's `Date` object is\nnotoriously difficult to correctly parse apart datetime strings or to format\ndatetime values. Even worse is how different browsers and JavaScript versions\nparse various datetime strings differently, especially per locale.\n\nFortunately, Ionic Framework's datetime input has been designed so developers can avoid\nthe common pitfalls, allowing developers to easily manipulate datetime values and give the user a simple datetime picker for a great user experience.\n\n##### ISO 8601 Datetime Format: YYYY-MM-DDTHH:mmZ\n\nIonic Framework uses the [ISO 8601 datetime format](https://www.w3.org/TR/NOTE-datetime)\nfor its value. The value is simply a string, rather than using JavaScript's\n`Date` object. Using the ISO datetime format makes it easy to serialize\nand parse within JSON objects and databases.\n\nAn ISO format can be used as a simple year, or just the hour and minute, or get\nmore detailed down to the millisecond and timezone. Any of the ISO formats below\ncan be used, and after a user selects a new value, Ionic Framework will continue to use\nthe same ISO format which datetime value was originally given as.\n\n| Description          | Format                 | Datetime Value Example        |\n| -------------------- | ---------------------- | ----------------------------  |\n| Year                 | YYYY                   | 1994                          |\n| Year and Month       | YYYY-MM                | 1994-12                       |\n| Complete Date        | YYYY-MM-DD             | 1994-12-15                    |\n| Date and Time        | YYYY-MM-DDTHH:mm       | 1994-12-15T13:47              |\n| UTC Timezone         | YYYY-MM-DDTHH:mm:ssTZD | 1994-12-15T13:47:20.789Z      |\n| Timezone Offset      | YYYY-MM-DDTHH:mm:ssTZD | 1994-12-15T13:47:20.789+05:00 |\n| Hour and Minute      | HH:mm                  | 13:47                         |\n| Hour, Minute, Second | HH:mm:ss               | 13:47:20                      |\n\nNote that the year is always four-digits, milliseconds (if it's added) is always\nthree-digits, and all others are always two-digits. So the number representing\nJanuary always has a leading zero, such as `01`. Additionally, the hour is\nalways in the 24-hour format, so `00` is `12am` on a 12-hour clock, `13` means\n`1pm`, and `23` means `11pm`.\n\n## Min and Max Datetimes\n\nDates are infinite in either direction, so for a user's selection there should be at least some form of restricting the dates that can be selected. By default, the maximum date is to the end of the current year, and the minimum date is from the beginning of the year that was 100 years ago.\n\nTo customize the minimum and maximum datetime values, the `min` and `max` component properties can be provided which may make more sense for the app's use-case. Following the same IS0 8601 format listed in the table above, each component can restrict which dates can be selected by the user. By passing `2016` to the `min` property and `2020-10-31` to the `max` property, the datetime will restrict the date selection between the beginning of `2016`, and `October 31st of 2020`.\n\n## Selecting Specific Values\n\nWhile the `min` and `max` properties allow you to restrict date selection to a certain range, the `monthValues`, `dayValues`, `yearValues`, `hourValues`, and `minuteValues` properties allow you choose specific days and times that you to have enabled.\n\nFor example, if we wanted users to only select minutes in increments of 15, we could pass `\"0,15,30,45\"` to the `minuteValues` property.\n\nAs another example, if we wanted users to only select from the month of October, we could pass `\"10\"` to the `monthValues` property.\n\n## Customizing Date and Time Presentation\n\nSome use cases may call for only date selection or only time selection. The `presentation` property allows you to specify which pickers to show and the order to show them in. For example, `presentation=\"time\"` would only show the time picker. `presentation=\"time-date\"` would show the time picker first and the date picker second, but `presentation=\"date-time\"` would show the date picker first and the time picker second.\n\n## Reset and Cancel Buttons\n\n`ion-datetime` provides `cancel` and `reset` methods that you can call when clicking on custom buttons that you have provided in the `buttons` slot. The `reset` method also allows you to provide a date to reset the datetime to.\n\n## Confirming Selected Values\n\nBy default, `ionChange` is emitted with the new datetime value whenever a new date is selected. To require user confirmation before emitting `ionChange`, you can either set the `showDefaultButtons` property to `true` or use the `buttons` slot to pass in a custom confirmation button. When passing in custom buttons, the confirm button must call the `confirm` method on `ion-datetime` for `ionChange` to be emitted.\n\n## Localization\n\nIonic Framework makes use of the [Intl.DatetimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DatetimeFormat) Web API which allows us to automatically localize the month and day names according to the language and region set on the user's device.\n\nFor instances where you need a specific locale, you can use the `locale` property to set it. The following example sets the language to \"French\" and the region to \"France\":\n\n```html\n<ion-datetime locale=\"fr-FR\"></ion-datetime>\n```\n\n### Controlling the Hour Cycle\n\n`ion-datetime` will use the hour cycle that is specified by the `locale` property by default. For example, if `locale` is set to `en-US`, then `ion-datetime` will use a 12 hour cycle.\n\nThere are 4 primary hour cycle types:\n\n| Hour cycle type | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| `'h12`          | Hour system using 1–12; corresponds to 'h' in patterns. The 12 hour clock, with midnight starting at 12:00 am. |\n| `'h23'`         | Hour system using 0–23; corresponds to 'H' in patterns. The 24 hour clock, with midnight starting at 0:00. |\n| `'h11'`         | Hour system using 0–11; corresponds to 'K' in patterns. The 12 hour clock, with midnight starting at 0:00 am. |\n| `'h24'`         | Hour system using 1–24; corresponds to 'k' in pattern. The 24 hour clock, with midnight starting at 24:00. |\n\n>  Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle\n\nThere may be scenarios where you need to have more control over which hour cycle is used. This is where the `hourCycle` property can help.\n\nIn the following example, we can use the `hourCycle` property to force `ion-datetime` to use the 12 hour cycle even though the locale is `en-GB`, which uses a 24 hour cycle by default:\n\n```html\n<ion-datetime hour-cycle=\"h12\" locale=\"en-GB\"></ion-datetime>\n```\n\n`ion-datetime` also supports [locale extension tags](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale). These tags let you encode information about the locale in the locale string itself. Developers may prefer to use the extension tag approach if they are using the [Intl.Locale API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) in their apps.\n\nFor example, if you wanted to use a 12 hour cycle with the `en-GB` locale, you could alternatively do:\n\n```html\n<ion-datetime locale=\"en-GB-u-hc-h12\"></ion-datetime>\n```\n\n`ion-datetime` currently supports the `h12` and `h23` hour cycle types. Interested in seeing support for `h11` and `h24` added to `ion-datetime`? [Let us know!](https://github.com/ionic-team/ionic-framework/issues/23750)\n\n### Setting the First Day of the Week\n\nFor `ion-datetime`, the default first day of the week is Sunday. As of 2021, there is no browser API that lets Ionic automatically determine the first day of the week based on a device's locale, though there is on-going work regarding this (see: [TC39 GitHub](https://github.com/tc39/ecma402/issues/6)).\n\nTo customize the first day of the week, developers can use the `firstDayOfWeek` property. This property takes in a number between `0` and `6` where `0` represents Sunday and `6` represents Saturday.\n\nFor example, if you wanted to have the first day of the week be Monday, you could set `firstDayOfWeek` to `1`:\n\n```html\n<ion-datetime first-day-of-week=\"1\"></ion-datetime>\n```\n\n## Parsing Dates\n\nWhen `ionChange` is emitted, we provide an ISO-8601 string in the event payload. From there, it is the developer's responsibility to format it as they see fit. We recommend using a library like [date-fns](https://date-fns.org) to format their dates properly.\n\nBelow is an example of formatting an ISO-8601 string to display the month, date, and year:\n\n```typescript\nimport { format, parseISO } from 'date-fns';\n\n/**\n * This is provided in the event\n * payload from the `ionChange` event.\n */\nconst dateFromIonDatetime = '2021-06-04T14:23:00-04:00';\nconst formattedString = format(parseISO(dateFromIonDatetime), 'MMM d, yyyy');\n\nconsole.log(formattedString); // Jun 4, 2021\n```\n\nSee https://date-fns.org/docs/format for a list of all the valid format tokens.\n\n## Advanced Datetime Validation and Manipulation\n\nThe datetime picker provides the simplicity of selecting an exact format, and\npersists the datetime values as a string using the standardized [ISO 8601\ndatetime format](https://www.w3.org/TR/NOTE-datetime). However, it's important\nto note that `ion-datetime` does not attempt to solve all situations when\nvalidating and manipulating datetime values. If datetime values need to be\nparsed from a certain format, or manipulated (such as adding 5 days to a date,\nsubtracting 30 minutes, etc.), or even formatting data to a specific locale,\nthen we highly recommend using [date-fns](https://date-fns.org) to work with\ndates in JavaScript.\n\n## Accessibility\n\n### Keyboard Navigation\n\n`ion-datetime` has full keyboard support for navigating between focusable elements inside of the component. The following table details what each key does:\n\n| Key                | Function                                                     |\n| ------------------ | ------------------------------------------------------------ |\n| `Tab`              | Moves focus to the next focusable element.                   |\n| `Shift` + `Tab`    | Moves focus to the previous focusable element.               |\n| `Space` or `Enter` | Clicks the focusable element.                                |\n\n#### Date Grid\n\n| Key                | Function                                                     |\n| ------------------ | ------------------------------------------------------------ |\n| `ArrowUp` | Moves focus to the same day of the previous week. |\n| `ArrowDown` | Moves focus to the same day of the next week. |\n| `ArrowRight` | Moves focus to the next day. |\n| `ArrowLeft` | Moves focus to the previous day. |\n| `Home` | Moves focus to the first day of the current week. |\n| `End` | Moves focus to the last day of the current week. |\n| `PageUp` | Changes the grid of dates to the previous month. |\n| `PageDown` | Changes the grid of dates to the next month. |\n| `Shift` + `PageUp` | Changes the grid of dates to the previous year. |\n| `Shift` + `PageDown` | Changes the grid of dates to the next year. |\n\n#### Time, Month, and Year Wheels\n\nWhen using the time wheel picker, you can use the number keys to select hour and minute values when the columns are focused.\n\n| Key                | Function                                                     |\n| ------------------ | ------------------------------------------------------------ |\n| `ArrowUp` | Scroll to the previous item. |\n| `ArrowDown` | Scroll to the next item. |\n| `Home` | Scroll to the first item. |\n| `End` | Scroll to the last item. |\n\n## Interfaces\n\n### DatetimeChangeEventDetail\n\n```typescript\ninterface DatetimeChangeEventDetail {\n  value?: string | null;\n}\n```\n\n### DatetimeCustomEvent\n\nWhile not required, this interface can be used in place of the `CustomEvent` interface for stronger typing with Ionic events emitted from this component.\n\n```typescript\ninterface DatetimeCustomEvent extends CustomEvent {\n  detail: DatetimeChangeEventDetail;\n  target: HTMLIonDatetimeElement;\n}\n```\n",
  "docs": "Datetimes present a calendar interface and time wheel, making it easy for users to select dates and times. Datetimes are similar to the native `input` elements of `datetime-local`, however, Ionic Framework's Datetime component makes it easy to display the date and time in the a preferred format, and manage the datetime values.",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "slot",
      "text": "title - The title of the datetime."
    },
    {
      "name": "slot",
      "text": "buttons - The buttons in the datetime."
    },
    {
      "name": "slot",
      "text": "time-label - The label for the time selector in the datetime."
    }
  ],
  "usage": {
    "angular": "```html\n<!-- Initial value -->\n<ion-datetime value=\"2012-12-15T13:47:20.789\"></ion-datetime>\n\n<!-- Readonly -->\n<ion-datetime readonly></ion-datetime>\n\n<!-- Disabled -->\n<ion-datetime disabled></ion-datetime>\n\n<!-- Custom locale -->\n<ion-datetime locale=\"en-GB\"></ion-datetime>\n\n<!-- Max and min -->\n<ion-datetime min=\"1994-03-14\" max=\"2012-12-09\" value=\"2008-09-02\"></ion-datetime>\n\n<!-- 15 minute increments -->\n<ion-datetime minuteValues=\"0,15,30,45\"></ion-datetime>\n\n<!-- Specific days/months/years --> \n<ion-datetime monthValues=\"6,7,8\" yearValues=\"2014,2015\" dayValues=\"01,02,03,04,05,06,08,09,10,11,12,13,14\"></ion-datetime>\n\n<!-- Selecting time, no date -->\n<ion-datetime presentation=\"time\"></ion-datetime>\n\n<!-- Selecting time first, date second -->\n<ion-datetime presentation=\"time-date\"></ion-datetime>\n\n<!-- Full width size -->\n<ion-datetime size=\"cover\"></ion-datetime>\n\n<!-- Custom Hour Cycle -->\n<ion-datetime hourCycle=\"h23\"></ion-datetime>\n\n<!-- Custom first day of week -->\n<ion-datetime [firstDayOfWeek]=\"1\"></ion-datetime>\n\n<!-- Custom title -->\n<ion-datetime>\n  <div slot=\"title\">My Custom Title</div>\n</ion-datetime>\n\n<!-- Clear button -->\n<ion-datetime [showClearButton]=\"true\"></ion-datetime>\n\n<!-- Datetime in overlay -->\n<ion-button id=\"open-modal\">Open Datetime Modal</ion-button>\n<ion-modal trigger=\"open-modal\">\n  <ng-template>\n    <ion-content>\n      <ion-datetime></ion-datetime>\n    </ion-content>\n  </ng-template>\n</ion-modal>\n\n<!-- Custom buttons -->\n<ion-datetime>\n  <ion-buttons slot=\"buttons\">\n    <ion-button (click)=\"confirm()\">Good to go!</ion-button>\n    <ion-button (click)=\"reset()\">Reset</ion-button>\n  </ion-buttons>\n</ion-datetime>\n\n<!-- Datetime in popover with cover element -->\n<ion-item button=\"true\" id=\"open-date-input\">\n  <ion-label>Date</ion-label>\n  <ion-text slot=\"end\">{{ dateValue }}</ion-text>\n  <ion-popover trigger=\"open-date-input\" show-backdrop=\"false\">\n    <ng-template>\n      <ion-datetime\n        #popoverDatetime\n        presentation=\"date\"\n        (ionChange)=\"dateValue = formatDate(popoverDatetime.value)\"\n      ></ion-datetime>\n    </ng-template>\n  </ion-popover>\n</ion-item>\n\n<!-- Datetime in popover with input -->\n<ion-item>\n  <ion-input [value]=\"dateValue2\"></ion-input>\n  <ion-button fill=\"clear\" id=\"open-date-input-2\">\n    <ion-icon icon=\"calendar\"></ion-icon>\n  </ion-button>\n  <ion-popover trigger=\"open-date-input-2\" show-backdrop=\"false\">\n    <ng-template>\n      <ion-datetime\n        #popoverDatetime2\n        presentation=\"date\"\n        (ionChange)=\"dateValue2 = formatDate(popoverDatetime2.value)\"\n      ></ion-datetime>\n    </ng-template>\n  </ion-popover>\n</ion-item>\n```\n\n```typescript\nimport { Component, ViewChild } from '@angular/core';\nimport { IonDatetime } from '@ionic/angular';\nimport { format, parseISO } from 'date-fns';\n\n@Component({…})\nexport class MyComponent {\n  @ViewChild(IonDatetime, { static: true }) datetime: IonDatetime;\n\n  dateValue = '';\n  dateValue2 = '';\n\n  constructor() {}\n  \n  confirm() {\n    this.datetime.nativeEl.confirm();\n  }\n  \n  reset() {\n    this.datetime.nativeEl.reset();\n  }\n\n  formatDate(value: string) {\n    return format(parseISO(value), 'MMM dd yyyy');\n  }\n}\n```",
    "javascript": "```html\n<!-- Initial value -->\n<ion-datetime value=\"2012-12-15T13:47:20.789\"></ion-datetime>\n\n<!-- Readonly -->\n<ion-datetime readonly></ion-datetime>\n\n<!-- Disabled -->\n<ion-datetime disabled></ion-datetime>\n\n<!-- Custom locale -->\n<ion-datetime locale=\"en-GB\"></ion-datetime>\n\n<!-- Max and min -->\n<ion-datetime min=\"1994-03-14\" max=\"2012-12-09\" value=\"2008-09-02\"></ion-datetime>\n\n<!-- 15 minute increments -->\n<ion-datetime minute-values=\"0,15,30,45\"></ion-datetime>\n\n<!-- Specific days/months/years --> \n<ion-datetime month-values=\"6,7,8\" year-values=\"2014,2015\" day-values=\"01,02,03,04,05,06,08,09,10,11,12,13,14\"></ion-datetime>\n\n<!-- Selecting time, no date -->\n<ion-datetime presentation=\"time\"></ion-datetime>\n\n<!-- Selecting time first, date second -->\n<ion-datetime presentation=\"time-date\"></ion-datetime>\n\n<!-- Full width size -->\n<ion-datetime size=\"cover\"></ion-datetime>\n\n<!-- Custom Hour Cycle -->\n<ion-datetime hour-cycle=\"h23\"></ion-datetime>\n\n<!-- Custom first day of week -->\n<ion-datetime first-day-of-week=\"1\"></ion-datetime>\n\n<!-- Custom title -->\n<ion-datetime>\n  <div slot=\"title\">My Custom Title</div>\n</ion-datetime>\n\n<!-- Clear button -->\n<ion-datetime show-clear-button=\"true\"></ion-datetime>\n\n<!-- Custom buttons -->\n<ion-datetime id=\"custom-datetime\">\n  <ion-buttons slot=\"buttons\">\n    <ion-button onclick=\"confirm()\">Good to go!</ion-button>\n    <ion-button onclick=\"reset()\">Reset</ion-button>\n  </ion-buttons>\n</ion-datetime>\n\n<!-- Datetime in overlay -->\n<ion-button id=\"open-modal\">Open Datetime Modal</ion-button>\n<ion-modal trigger=\"open-modal\">\n  <ion-content>\n    <ion-datetime></ion-datetime>\n  </ion-content>\n</ion-modal>\n\n<!-- Datetime in popover with cover element -->\n<ion-item button=\"true\" id=\"open-date-input\">\n  <ion-label>Date</ion-label>\n  <ion-text slot=\"end\" id=\"date-input\"></ion-text>\n  <ion-popover trigger=\"open-date-input\" show-backdrop=\"false\">\n    <ion-datetime presentation=\"date\" id=\"popover-datetime\"></ion-datetime>\n  </ion-popover>\n</ion-item>\n\n<!-- Datetime in popover with input -->\n<ion-item>\n  <ion-input id=\"date-input-2\"></ion-input>\n  <ion-button slot=\"end\" fill=\"clear\" id=\"open-date-input-2\">\n    <ion-icon icon=\"calendar\"></ion-icon>\n  </ion-button>\n  <ion-popover trigger=\"open-date-input-2\" show-backdrop=\"false\">\n    <ion-datetime presentation=\"date\" id=\"popover-datetime-2\"></ion-datetime>\n  </ion-popover>\n</ion-item>\n```\n\n```javascript\nimport { format, parseISO } from 'date-fns';\n\nconst datetime = document.querySelector('#custom-datetime');\n\nconst confirm = () => {\n  datetime.confirm();\n};\n\nconst reset = () => {\n  datetime.reset();\n};\n\nconst formatDate = (value: string) => {\n  return format(parseISO(value), 'MMM dd yyyy');\n};\n\nconst popoverDatetime = document.querySelector('#popover-datetime');\nconst dateInput = document.querySelector('#date-input');\npopoverDatetime.addEventListener('ionChange', ev => dateInput.innerText = formatDate(ev.detail.value));\n\nconst popoverDatetime2 = document.querySelector('#popover-datetime-2');\nconst dateInput2 = document.querySelector('#date-input-2');\npopoverDatetime2.addEventListener('ionChange', ev => dateInput2.value = formatDate(ev.detail.value));\n```",
    "react": "```javascript\nimport React, { useState, useRef } from 'react';\nimport {\n  IonButton,\n  IonButtons,\n  IonContent,\n  IonDatetime,\n  IonInput,\n  IonItem,\n  IonModal,\n  IonPage,\n  IonPopover\n} from '@ionic/react';\nimport { calendar } from 'ionicons/icons';\nimport { format, parseISO } from 'date-fns';\n\nexport const DateTimeExamples: React.FC = () => {\n  const [selectedDate, setSelectedDate] = useState('2012-12-15T13:47:20.789');\n  const [popoverDate, setPopoverDate] = useState('');\n  const [popoverDate2, setPopoverDate2] = useState('');\n\n  const customDatetime = useRef();\n  const confirm = () => {\n    if (customDatetime === undefined) return;\n    \n    customDatetime.confirm();\n  };\n  \n  const reset = () => {\n    if (customDatetime === undefined) return;\n    \n    customDatetime.reset();\n  };\n\n  const formatDate = (value: string) => {\n    return format(parseISO(value), 'MMM dd yyyy');\n  };\n\n  return (\n    <IonPage>\n      {/* Initial value */}\n      <IonDatetime value={selectedDate} onIonChange={e => setSelectedDate(e.detail.value!)}></IonDatetime>\n      \n      {/* Readonly */}\n      <IonDatetime readonly></IonDatetime>\n      \n      {/* Disabled */}\n      <IonDatetime disabled></IonDatetime>\n      \n      {/* Custom locale */}\n      <IonDatetime locale=\"en-GB\"></IonDatetime>\n      \n      {/* Max and min */}\n      <IonDatetime min=\"1994-03-14\" max=\"2012-12-09\" value=\"2008-09-02\"></IonDatetime>\n      \n      {/* 15 minute increments */}\n      <IonDatetime minuteValues=\"0,15,30,45\"></IonDatetime>\n      \n      {/* Specific days/months/years */} \n      <IonDatetime monthValues=\"6,7,8\" yearValues=\"2014,2015\" dayValues=\"01,02,03,04,05,06,08,09,10,11,12,13,14\"></IonDatetime>\n      \n      {/* Selecting time, no date */}\n      <IonDatetime presentation=\"time\"></IonDatetime>\n      \n      {/* Selecting time first, date second */}\n      <IonDatetime presentation=\"time-date\"></IonDatetime>\n\n      {/* Full width size */}\n      <IonDatetime size=\"cover\"></IonDatetime>\n      \n      {/* Custom Hour Cycle */}\n      <IonDatetime hourCycle=\"h23\"></IonDatetime>\n      \n      {/* Custom first day of week */}\n      <IonDatetime firstDayOfWeek={1}></IonDatetime>\n\n      {/* Custom title */}\n      <IonDatetime>\n        <div slot=\"title\">My Custom Title</div>\n      </IonDatetime>\n\n      {/* Clear button */}\n      <IonDatetime showClearButton={true}></IonDatetime>\n      \n      {/* Custom buttons */}\n      <IonDatetime ref={customDatetime}>\n        <IonButtons slot=\"buttons\">\n          <IonButton onClick={() => confirm()}>Good to go!</IonButton>\n          <IonButton onClick={() => reset()}>Reset</IonButton>\n        </IonButtons>\n      </IonDatetime>\n      \n      {/* Datetime in overlay */}\n      <IonButton id=\"open-modal\">Open Datetime Modal</IonButton>\n      <IonModal trigger=\"open-modal\">\n        <IonContent>\n          <IonDatetime></IonDatetime>\n        </IonContent>\n      </IonModal>\n\n      {/* Datetime in popover with cover element */}\n      <IonItem button={true} id=\"open-date-input\">\n        <IonLabel>Date</IonLabel>\n        <IonText slot=\"end\">{popoverDate}</IonText>\n        <IonPopover trigger=\"open-date-input\" showBackdrop={false}>\n          <IonDatetime\n            presentation=\"date\"\n            onIonChange={ev => setPopoverDate(formatDate(ev.detail.value!))}\n          />\n        </IonPopover>\n      </IonItem>\n\n      {/* Datetime in popover with input */}\n      <IonItem>\n        <IonInput id=\"date-input-2\" value={popoverDate2} />\n        <IonButton fill=\"clear\" id=\"open-date-input-2\">\n          <IonIcon icon={calendar} />\n        </IonButton>\n        <IonPopover trigger=\"open-date-input-2\" showBackdrop={false}>\n          <IonDatetime\n            presentation=\"date\"\n            onIonChange={ev => setPopoverDate2(formatDate(ev.detail.value!))}\n          />\n        </IonPopover>\n      </IonItem>\n    </IonPage>\n  )\n}\n```",
    "stencil": "```javascript\nimport { Component, h } from '@stencil/core';\nimport { format, parseISO } from 'date-fns';\n\n@Component({\n  tag: 'datetime-example',\n  styleUrl: 'datetime-example.css'\n})\nexport class DatetimeExample {\n  private customDatetime?: HTMLElement;\n  private dateInput?: HTMLElement;\n  private dateInput2?: HTMLElement;\n  \n  private confirm() {\n    const { customDatetime } = this;\n    if (customDatetime === undefined) return;\n    \n    customDatetime.confirm();\n  }\n\n  private reset() {\n    const { customDatetime } = this;\n    if (customDatetime === undefined) return;\n    \n    customDatetime.reset();\n  }\n\n  private formatDate(value: string) {\n    return format(parseISO(value), 'MMM dd yyyy');\n  }\n  \n  render() {\n    return [\n      {/* Initial value */}\n      <ion-datetime value=\"2012-12-15T13:47:20.789\"></ion-datetime>,\n      \n      {/* Readonly */}\n      <ion-datetime readonly></ion-datetime>,\n      \n      {/* Disabled */}\n      <ion-datetime disabled></ion-datetime>,\n      \n      {/* Custom locale */}\n      <ion-datetime locale=\"en-GB\"></ion-datetime>,\n      \n      {/* Max and min */}\n      <ion-datetime min=\"1994-03-14\" max=\"2012-12-09\" value=\"2008-09-02\"></ion-datetime>,\n      \n      {/* 15 minute increments */}\n      <ion-datetime minuteValues=\"0,15,30,45\"></ion-datetime>,\n      \n      {/* Specific days/months/years */} \n      <ion-datetime monthValues=\"6,7,8\" yearValues=\"2014,2015\" dayValues=\"01,02,03,04,05,06,08,09,10,11,12,13,14\"></ion-datetime>,\n      \n      {/* Selecting time, no date */}\n      <ion-datetime presentation=\"time\"></ion-datetime>,\n      \n      {/* Selecting time first, date second */}\n      <ion-datetime presentation=\"time-date\"></ion-datetime>,\n\n      {/* Full width size */}\n      <ion-datetime size=\"cover\"></ion-datetime>,\n      \n      {/* Custom Hour Cycle */}\n      <ion-datetime hourCycle=\"h23\"></ion-datetime>,\n      \n      {/* Custom first day of week */}\n      <ion-datetime firstDayOfWeek={1}></ion-datetime>,\n\n      {/* Custom title */}\n      <ion-datetime>\n        <div slot=\"title\">My Custom Title</div>\n      </ion-datetime>,\n\n      {/* Clear button */}\n      <ion-datetime showClearButton={true}></ion-datetime>  \n      \n      {/* Custom buttons */}\n      <ion-datetime ref={el => this.customDatetime = el}>\n        <ion-buttons slot=\"buttons\">\n          <ion-button onClick={() => this.confirm()}>Good to go!</ion-button>\n          <ion-button onClick={() => this.reset()}>Reset</ion-button>\n        </ion-buttons>\n      </ion-datetime>,\n      \n      {/* Datetime in overlay */}\n      <ion-button id=\"open-modal\">Open Datetime Modal</ion-button>\n      <ion-modal trigger=\"open-modal\">\n        <ion-content>\n          <ion-datetime></ion-datetime>\n        </ion-content>\n      </ion-modal>\n\n      {/* Datetime in popover with cover element */}\n      <ion-item button=\"true\" id=\"open-date-input\">\n        <ion-label>Date</ion-label>\n        <ion-text slot=\"end\" ref={el => this.dateInput = el}></ion-text>\n        <ion-popover trigger=\"open-date-input\" show-backdrop=\"false\">\n          <ion-datetime\n            presentation=\"date\"\n            onIonChange={ev => this.dateInput.innerText = formatDate(ev.detail.value)}\n          />\n        </ion-popover>\n      </ion-item>\n\n      {/* Datetime in popover with input */}\n      <ion-item>\n        <ion-input ref={el => this.dateInput2 = el}></ion-input>\n        <ion-button slot=\"end\" fill=\"clear\" id=\"open-date-input-2\">\n          <ion-icon icon=\"calendar\"></ion-icon>\n        </ion-button>\n        <ion-popover trigger=\"open-date-input-2\" show-backdrop=\"false\">\n          <ion-datetime\n            presentation=\"date\"\n            onIonChange={ev => this.dateInput2.value = formatDate(ev.detail.value)}\n          />\n        </ion-popover>\n      </ion-item>\n    ]\n  }\n}\n```",
    "vue": "```html\n<template>\n  <!-- Initial value -->\n  <ion-datetime value=\"2012-12-15T13:47:20.789\"></ion-datetime>\n  \n  <!-- Readonly -->\n  <ion-datetime readonly></ion-datetime>\n  \n  <!-- Disabled -->\n  <ion-datetime disabled></ion-datetime>\n  \n  <!-- Custom locale -->\n  <ion-datetime locale=\"en-GB\"></ion-datetime>\n  \n  <!-- Max and min -->\n  <ion-datetime min=\"1994-03-14\" max=\"2012-12-09\" value=\"2008-09-02\"></ion-datetime>\n  \n  <!-- 15 minute increments -->\n  <ion-datetime minute-values=\"0,15,30,45\"></ion-datetime>\n  \n  <!-- Specific days/months/years --> \n  <ion-datetime month-values=\"6,7,8\" year-values=\"2014,2015\" day-values=\"01,02,03,04,05,06,08,09,10,11,12,13,14\"></ion-datetime>\n  \n  <!-- Selecting time, no date -->\n  <ion-datetime presentation=\"time\"></ion-datetime>\n  \n  <!-- Selecting time first, date second -->\n  <ion-datetime presentation=\"time-date\"></ion-datetime>\n\n  <!-- Full width size -->\n  <ion-datetime size=\"cover\"></ion-datetime>\n  \n  <!-- Custom Hour Cycle -->\n  <ion-datetime hour-cycle=\"h23\"></ion-datetime>\n  \n  <!-- Custom first day of week -->\n  <ion-datetime first-day-of-week=\"1\"></ion-datetime>\n\n  <!-- Custom title -->\n  <ion-datetime>\n    <div slot=\"title\">My Custom Title</div>\n  </ion-datetime>\n\n  <!-- Clear button -->\n  <ion-datetime :show-clear-button=\"true\"></ion-datetime>\n  \n  <!-- Custom buttons -->\n  <ion-datetime ref=\"customDatetime\">\n    <ion-buttons slot=\"buttons\">\n      <ion-button @click=\"confirm()\">Good to go!</ion-button>\n      <ion-button @click=\"reset()\">Reset</ion-button>\n    </ion-buttons>\n  </ion-datetime>\n  \n  <!-- Datetime in overlay -->\n  <ion-button id=\"open-modal\">Open Datetime Modal</ion-button>\n  <ion-modal trigger=\"open-modal\">\n    <ion-content>\n      <ion-datetime></ion-datetime>\n    </ion-content>\n  </ion-modal>\n\n  <!-- Datetime in popover with cover element -->\n  <ion-item button=\"true\" id=\"open-date-input\">\n    <ion-label>Date</ion-label>\n    <ion-text slot=\"end\">{{ date1 }}</ion-text>\n    <ion-popover trigger=\"open-date-input\" :show-backdrop=\"false\">\n      <ion-datetime\n        presentation=\"date\"\n        @ionChange=\"(ev: DatetimeCustomEvent) => date1 = formatDate(ev.detail.value)\"\n      />\n    </ion-popover>\n  </ion-item>\n\n  <!-- Datetime in popover with input -->\n  <ion-item>\n    <ion-input :value=\"date2\" />\n    <ion-button fill=\"clear\" id=\"open-date-input-2\">\n      <ion-icon icon=\"calendar\" />\n    </ion-button>\n    <ion-popover trigger=\"open-date-input-2\" :show-backdrop=\"false\">\n      <ion-datetime\n        presentation=\"date\"\n        @ionChange=\"(ev: DatetimeCustomEvent) => date2 = formatDate(ev.detail.value)\"\n      />\n    </ion-popover>\n  </ion-item>\n</template>\n\n<script>\n  import { defineComponent, ref } from 'vue';\n  import {\n    IonButton,\n    IonButtons,\n    IonContent,\n    IonDatetime,\n    IonInput,\n    IonItem,\n    IonModal,\n    IonPopover\n  } from '@ionic/vue';\n  import { format, parseISO } from 'date-fns';\n\n  export default defineComponent({\n    components: {\n      IonButton,\n      IonButtons,\n      IonContent,\n      IonDatetime,\n      IonInput,\n      IonItem,\n      IonModal,\n      IonPopover\n    },\n    setup() {\n      const customDatetime = ref();\n      const date1 = '';\n      const date2 = '';\n\n      const confirm = () => {\n        if (customDatetime.value === undefined) return;\n        \n        customDatetime.value.$el.confirm();\n      };\n\n      const reset = () => {\n        if (customDatetime.value === undefined) return;\n        \n        customDatetime.value.$el.reset();\n      };\n\n      const formatDate = (value: string) => {\n        return format(parseISO(value), 'MMM dd yyyy');\n      };\n\n      return {\n        customDatetime,\n        confirm,\n        reset\n      }\n    }\n  })\n</script>\n```"
  },
  "props": [
    {
      "name": "cancelText",
      "type": "string",
      "mutable": false,
      "attr": "cancel-text",
      "reflectToAttr": false,
      "docs": "The text to display on the picker's cancel button.",
      "docsTags": [],
      "default": "'Cancel'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "clearText",
      "type": "string",
      "mutable": false,
      "attr": "clear-text",
      "reflectToAttr": false,
      "docs": "The text to display on the picker's \"Clear\" button.",
      "docsTags": [],
      "default": "'Clear'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "color",
      "type": "string | undefined",
      "mutable": false,
      "attr": "color",
      "reflectToAttr": false,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "default": "'primary'",
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "dayValues",
      "type": "number | number[] | string | undefined",
      "mutable": false,
      "attr": "day-values",
      "reflectToAttr": false,
      "docs": "Values used to create the list of selectable days. By default\nevery day is shown for the given month. However, to control exactly which days of\nthe month to display, the `dayValues` input can take a number, an array of numbers, or\na string of comma separated numbers. Note that even if the array days have an invalid\nnumber for the selected month, like `31` in February, it will correctly not show\ndays which are not valid for the selected month.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "number[]"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the datetime.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "doneText",
      "type": "string",
      "mutable": false,
      "attr": "done-text",
      "reflectToAttr": false,
      "docs": "The text to display on the picker's \"Done\" button.",
      "docsTags": [],
      "default": "'Done'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "firstDayOfWeek",
      "type": "number",
      "mutable": false,
      "attr": "first-day-of-week",
      "reflectToAttr": false,
      "docs": "The first day of the week to use for `ion-datetime`. The\ndefault value is `0` and represents Sunday.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "hourCycle",
      "type": "\"h12\" | \"h23\" | undefined",
      "mutable": false,
      "attr": "hour-cycle",
      "reflectToAttr": false,
      "docs": "The hour cycle of the `ion-datetime`. If no value is set, this is\nspecified by the current locale.",
      "docsTags": [],
      "values": [
        {
          "value": "h12",
          "type": "string"
        },
        {
          "value": "h23",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "hourValues",
      "type": "number | number[] | string | undefined",
      "mutable": false,
      "attr": "hour-values",
      "reflectToAttr": false,
      "docs": "Values used to create the list of selectable hours. By default\nthe hour values range from `0` to `23` for 24-hour, or `1` to `12` for 12-hour. However,\nto control exactly which hours to display, the `hourValues` input can take a number, an\narray of numbers, or a string of comma separated numbers.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "number[]"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "locale",
      "type": "string",
      "mutable": false,
      "attr": "locale",
      "reflectToAttr": false,
      "docs": "The locale to use for `ion-datetime`. This\nimpacts month and day name formatting.\nThe `'default'` value refers to the default\nlocale set by your device.",
      "docsTags": [],
      "default": "'default'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "max",
      "type": "string | undefined",
      "mutable": true,
      "attr": "max",
      "reflectToAttr": false,
      "docs": "The maximum datetime allowed. Value must be a date string\nfollowing the\n[ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),\n`1996-12-19`. The format does not have to be specific to an exact\ndatetime. For example, the maximum could just be the year, such as `1994`.\nDefaults to the end of this year.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "min",
      "type": "string | undefined",
      "mutable": true,
      "attr": "min",
      "reflectToAttr": false,
      "docs": "The minimum datetime allowed. Value must be a date string\nfollowing the\n[ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),\nsuch as `1996-12-19`. The format does not have to be specific to an exact\ndatetime. For example, the minimum could just be the year, such as `1994`.\nDefaults to the beginning of the year, 100 years ago from today.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "minuteValues",
      "type": "number | number[] | string | undefined",
      "mutable": false,
      "attr": "minute-values",
      "reflectToAttr": false,
      "docs": "Values used to create the list of selectable minutes. By default\nthe minutes range from `0` to `59`. However, to control exactly which minutes to display,\nthe `minuteValues` input can take a number, an array of numbers, or a string of comma\nseparated numbers. For example, if the minute selections should only be every 15 minutes,\nthen this input value would be `minuteValues=\"0,15,30,45\"`.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "number[]"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "monthValues",
      "type": "number | number[] | string | undefined",
      "mutable": false,
      "attr": "month-values",
      "reflectToAttr": false,
      "docs": "Values used to create the list of selectable months. By default\nthe month values range from `1` to `12`. However, to control exactly which months to\ndisplay, the `monthValues` input can take a number, an array of numbers, or a string of\ncomma separated numbers. For example, if only summer months should be shown, then this\ninput value would be `monthValues=\"6,7,8\"`. Note that month numbers do *not* have a\nzero-based index, meaning January's value is `1`, and December's is `12`.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "number[]"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "presentation",
      "type": "\"date\" | \"date-time\" | \"month\" | \"month-year\" | \"time\" | \"time-date\" | \"year\"",
      "mutable": false,
      "attr": "presentation",
      "reflectToAttr": false,
      "docs": "Which values you want to select. `'date'` will show\na calendar picker to select the month, day, and year. `'time'`\nwill show a time picker to select the hour, minute, and (optionally)\nAM/PM. `'date-time'` will show the date picker first and time picker second.\n`'time-date'` will show the time picker first and date picker second.",
      "docsTags": [],
      "default": "'date-time'",
      "values": [
        {
          "value": "date",
          "type": "string"
        },
        {
          "value": "date-time",
          "type": "string"
        },
        {
          "value": "month",
          "type": "string"
        },
        {
          "value": "month-year",
          "type": "string"
        },
        {
          "value": "time",
          "type": "string"
        },
        {
          "value": "time-date",
          "type": "string"
        },
        {
          "value": "year",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "readonly",
      "type": "boolean",
      "mutable": false,
      "attr": "readonly",
      "reflectToAttr": false,
      "docs": "If `true`, the datetime appears normal but is not interactive.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "showClearButton",
      "type": "boolean",
      "mutable": false,
      "attr": "show-clear-button",
      "reflectToAttr": false,
      "docs": "If `true`, a \"Clear\" button will be rendered alongside\nthe default \"Cancel\" and \"OK\" buttons at the bottom of the `ion-datetime`\ncomponent. Developers can also use the `button` slot\nif they want to customize these buttons. If custom\nbuttons are set in the `button` slot then the\ndefault buttons will not be rendered.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "showDefaultButtons",
      "type": "boolean",
      "mutable": false,
      "attr": "show-default-buttons",
      "reflectToAttr": false,
      "docs": "If `true`, the default \"Cancel\" and \"OK\" buttons\nwill be rendered at the bottom of the `ion-datetime`\ncomponent. Developers can also use the `button` slot\nif they want to customize these buttons. If custom\nbuttons are set in the `button` slot then the\ndefault buttons will not be rendered.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "showDefaultTimeLabel",
      "type": "boolean",
      "mutable": false,
      "attr": "show-default-time-label",
      "reflectToAttr": false,
      "docs": "If `true`, the default \"Time\" label will be rendered\nfor the time selector of the `ion-datetime` component.\nDevelopers can also use the `time-label` slot\nif they want to customize this label. If a custom\nlabel is set in the `time-label` slot then the\ndefault label will not be rendered.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "showDefaultTitle",
      "type": "boolean",
      "mutable": false,
      "attr": "show-default-title",
      "reflectToAttr": false,
      "docs": "If `true`, a header will be shown above the calendar\npicker. On `ios` mode this will include the\nslotted title, and on `md` mode this will include\nthe slotted title and the selected date.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "size",
      "type": "\"cover\" | \"fixed\"",
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "If `cover`, the `ion-datetime` will expand to cover the full width of its container.\nIf `fixed`, the `ion-datetime` will have a fixed width.",
      "docsTags": [],
      "default": "'fixed'",
      "values": [
        {
          "value": "cover",
          "type": "string"
        },
        {
          "value": "fixed",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "value",
      "type": "null | string | undefined",
      "mutable": true,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the datetime as a valid ISO 8601 datetime string.",
      "docsTags": [],
      "values": [
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "yearValues",
      "type": "number | number[] | string | undefined",
      "mutable": false,
      "attr": "year-values",
      "reflectToAttr": false,
      "docs": "Values used to create the list of selectable years. By default\nthe year values range between the `min` and `max` datetime inputs. However, to\ncontrol exactly which years to display, the `yearValues` input can take a number, an array\nof numbers, or string of comma separated numbers. For example, to show upcoming and\nrecent leap years, then this input's value would be `yearValues=\"2024,2020,2016,2012,2008\"`.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "number[]"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "cancel",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "cancel(closeOverlay?: boolean) => Promise<void>",
      "parameters": [],
      "docs": "Emits the ionCancel event and\noptionally closes the popover\nor modal that the datetime was\npresented in.",
      "docsTags": []
    },
    {
      "name": "confirm",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "confirm(closeOverlay?: boolean) => Promise<void>",
      "parameters": [],
      "docs": "Confirms the selected datetime value, updates the\n`value` property, and optionally closes the popover\nor modal that the datetime was presented in.",
      "docsTags": []
    },
    {
      "name": "reset",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "reset(startDate?: string | undefined) => Promise<void>",
      "parameters": [],
      "docs": "Resets the internal state of the datetime but does not update the value.\nPassing a valid ISO-8601 string will reset the state of the component to the provided date.\nIf no value is provided, the internal state will be reset to today.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "ionBlur",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the datetime loses focus.",
      "docsTags": []
    },
    {
      "event": "ionCancel",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the datetime selection was cancelled.",
      "docsTags": []
    },
    {
      "event": "ionChange",
      "detail": "DatetimeChangeEventDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the value (selected date) has changed.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the datetime has focus.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "The primary background of the datetime component."
    },
    {
      "name": "--background-rgb",
      "annotation": "prop",
      "docs": "The primary background of the datetime component in RGB format."
    },
    {
      "name": "--title-color",
      "annotation": "prop",
      "docs": "The text color of the title."
    }
  ],
  "slots": [
    {
      "name": "buttons",
      "docs": "The buttons in the datetime."
    },
    {
      "name": "time-label",
      "docs": "The label for the time selector in the datetime."
    },
    {
      "name": "title",
      "docs": "The title of the datetime."
    }
  ],
  "parts": [],
  "dependents": [],
  "dependencies": [
    "ion-buttons",
    "ion-button",
    "ion-picker-internal",
    "ion-picker-column-internal",
    "ion-item",
    "ion-label",
    "ion-icon",
    "ion-popover"
  ],
  "dependencyGraph": {
    "ion-datetime": [
      "ion-buttons",
      "ion-button",
      "ion-picker-internal",
      "ion-picker-column-internal",
      "ion-item",
      "ion-label",
      "ion-icon",
      "ion-popover"
    ],
    "ion-button": [
      "ion-ripple-effect"
    ],
    "ion-item": [
      "ion-icon",
      "ion-ripple-effect",
      "ion-note"
    ],
    "ion-popover": [
      "ion-backdrop"
    ]
  }
}