{
  "filePath": "./src/components/textarea/textarea.tsx",
  "encapsulation": "scoped",
  "tag": "ion-textarea",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "autoGrow",
      "type": "boolean",
      "mutable": false,
      "attr": "auto-grow",
      "reflectToAttr": true,
      "docs": "If `true`, the textarea container will grow and shrink based\non the contents of the textarea.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "autocapitalize",
      "type": "string",
      "mutable": false,
      "attr": "autocapitalize",
      "reflectToAttr": false,
      "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
      "docsTags": [],
      "default": "'none'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "autofocus",
      "type": "boolean",
      "mutable": false,
      "attr": "autofocus",
      "reflectToAttr": false,
      "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "clearOnEdit",
      "type": "boolean",
      "mutable": true,
      "attr": "clear-on-edit",
      "reflectToAttr": false,
      "docs": "If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "cols",
      "type": "number | undefined",
      "mutable": false,
      "attr": "cols",
      "reflectToAttr": false,
      "docs": "The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "debounce",
      "type": "number",
      "mutable": false,
      "attr": "debounce",
      "reflectToAttr": false,
      "docs": "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the textarea.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "enterkeyhint",
      "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
      "mutable": false,
      "attr": "enterkeyhint",
      "reflectToAttr": false,
      "docs": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`.",
      "docsTags": [],
      "values": [
        {
          "value": "done",
          "type": "string"
        },
        {
          "value": "enter",
          "type": "string"
        },
        {
          "value": "go",
          "type": "string"
        },
        {
          "value": "next",
          "type": "string"
        },
        {
          "value": "previous",
          "type": "string"
        },
        {
          "value": "search",
          "type": "string"
        },
        {
          "value": "send",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "inputmode",
      "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
      "mutable": false,
      "attr": "inputmode",
      "reflectToAttr": false,
      "docs": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
      "docsTags": [],
      "values": [
        {
          "value": "decimal",
          "type": "string"
        },
        {
          "value": "email",
          "type": "string"
        },
        {
          "value": "none",
          "type": "string"
        },
        {
          "value": "numeric",
          "type": "string"
        },
        {
          "value": "search",
          "type": "string"
        },
        {
          "value": "tel",
          "type": "string"
        },
        {
          "value": "text",
          "type": "string"
        },
        {
          "value": "url",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "maxlength",
      "type": "number | undefined",
      "mutable": false,
      "attr": "maxlength",
      "reflectToAttr": false,
      "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "minlength",
      "type": "number | undefined",
      "mutable": false,
      "attr": "minlength",
      "reflectToAttr": false,
      "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "placeholder",
      "type": "string | undefined",
      "mutable": false,
      "attr": "placeholder",
      "reflectToAttr": false,
      "docs": "Instructional text that shows before the input has a value.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "readonly",
      "type": "boolean",
      "mutable": false,
      "attr": "readonly",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot modify the value.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "required",
      "type": "boolean",
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If `true`, the user must fill in a value before submitting a form.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "rows",
      "type": "number | undefined",
      "mutable": false,
      "attr": "rows",
      "reflectToAttr": false,
      "docs": "The number of visible text lines for the control.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "spellcheck",
      "type": "boolean",
      "mutable": false,
      "attr": "spellcheck",
      "reflectToAttr": false,
      "docs": "If `true`, the element will have its spelling and grammar checked.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "value",
      "type": "null | string | undefined",
      "mutable": true,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the textarea.",
      "docsTags": [],
      "default": "''",
      "values": [
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "wrap",
      "type": "\"hard\" | \"off\" | \"soft\" | undefined",
      "mutable": false,
      "attr": "wrap",
      "reflectToAttr": false,
      "docs": "Indicates how the control wraps text.",
      "docsTags": [],
      "values": [
        {
          "value": "hard",
          "type": "string"
        },
        {
          "value": "off",
          "type": "string"
        },
        {
          "value": "soft",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "getInputElement",
      "returns": {
        "type": "Promise<HTMLTextAreaElement>",
        "docs": ""
      },
      "signature": "getInputElement() => Promise<HTMLTextAreaElement>",
      "parameters": [],
      "docs": "Returns the native `<textarea>` element used under the hood.",
      "docsTags": []
    },
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\n`textarea.focus()`.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "ionBlur",
      "detail": "FocusEvent",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the input loses focus.",
      "docsTags": []
    },
    {
      "event": "ionChange",
      "detail": "TextareaChangeEventDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the input value has changed.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "FocusEvent",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the input has focus.",
      "docsTags": []
    },
    {
      "event": "ionInput",
      "detail": "InputEvent",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when a keyboard input occurred.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the textarea"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the textarea"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the text"
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the textarea"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Top padding of the textarea"
    },
    {
      "name": "--placeholder-color",
      "annotation": "prop",
      "docs": "Color of the placeholder text"
    },
    {
      "name": "--placeholder-font-style",
      "annotation": "prop",
      "docs": "Style of the placeholder text"
    },
    {
      "name": "--placeholder-font-weight",
      "annotation": "prop",
      "docs": "Weight of the placeholder text"
    },
    {
      "name": "--placeholder-opacity",
      "annotation": "prop",
      "docs": "Opacity of the placeholder text"
    }
  ],
  "slots": [],
  "parts": [],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}